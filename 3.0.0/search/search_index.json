{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Kamihi  <p> Python framework for rapid Telegram bot development and management </p> <p> </p> <p>This project is currently in the early stages of development. Expect frequent changes and updates as we work towards a stable release. Your feedback and contributions are welcome!</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#300-2025-09-02","title":"3.0.0 (2025-09-02)","text":""},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>migrated to new organization</li> </ul>"},{"location":"changelog/#200-2025-07-13","title":"2.0.0 (2025-07-13)","text":""},{"location":"changelog/#breaking-change","title":"BREAKING CHANGE","text":"<ul> <li>removed <code>autoreload_templates</code> configuration option</li> </ul>"},{"location":"changelog/#feat_1","title":"Feat","text":"<ul> <li>bot: integrated templates with actions (#97)</li> </ul>"},{"location":"changelog/#120-2025-07-12","title":"1.2.0 (2025-07-12)","text":""},{"location":"changelog/#feat_2","title":"Feat","text":"<ul> <li>bot: support sending all media types (#94)</li> </ul>"},{"location":"changelog/#110-2025-06-04","title":"1.1.0 (2025-06-04)","text":""},{"location":"changelog/#feat_3","title":"Feat","text":"<ul> <li>bot: support sending files as action result (#78)</li> </ul>"},{"location":"changelog/#100-2025-05-27","title":"1.0.0 (2025-05-27)","text":""},{"location":"changelog/#feat_4","title":"Feat","text":"<ul> <li>cli: added first commands (#51)</li> </ul>"},{"location":"changelog/#080-2025-05-20","title":"0.8.0 (2025-05-20)","text":""},{"location":"changelog/#feat_5","title":"Feat","text":"<ul> <li>bot: user can now be requested in action function parameters (#48)</li> </ul>"},{"location":"changelog/#071-2025-05-18","title":"0.7.1 (2025-05-18)","text":""},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>tg: auth handler now calls check update of wrapped handler (#44)</li> </ul>"},{"location":"changelog/#070-2025-05-13","title":"0.7.0 (2025-05-13)","text":""},{"location":"changelog/#feat_6","title":"Feat","text":"<ul> <li>users: initial user functionality (#39)</li> </ul>"},{"location":"changelog/#060-2025-05-05","title":"0.6.0 (2025-05-05)","text":""},{"location":"changelog/#feat_7","title":"Feat","text":"<ul> <li>web: initial implementation (#36)</li> </ul>"},{"location":"changelog/#053-2025-05-02","title":"0.5.3 (2025-05-02)","text":""},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>tg: markdown escaping (#34)</li> </ul>"},{"location":"changelog/#052-2025-05-01","title":"0.5.2 (2025-05-01)","text":""},{"location":"changelog/#fix_2","title":"Fix","text":"<ul> <li>checking out latest ref instead of action ref</li> </ul>"},{"location":"changelog/#051-2025-05-01","title":"0.5.1 (2025-05-01)","text":""},{"location":"changelog/#fix_3","title":"Fix","text":"<ul> <li>added metadata to pyproject.toml</li> </ul>"},{"location":"changelog/#050-2025-05-01","title":"0.5.0 (2025-05-01)","text":""},{"location":"changelog/#feat_8","title":"Feat","text":"<ul> <li>bot: added (#27)</li> </ul>"},{"location":"changelog/#040-2025-04-17","title":"0.4.0 (2025-04-17)","text":""},{"location":"changelog/#feat_9","title":"Feat","text":"<ul> <li>tg: added (#19)</li> </ul>"},{"location":"changelog/#030-2025-04-01","title":"0.3.0 (2025-04-01)","text":""},{"location":"changelog/#feat_10","title":"Feat","text":"<ul> <li>templates: added (#14)</li> </ul>"},{"location":"changelog/#020-2025-03-28","title":"0.2.0 (2025-03-28)","text":""},{"location":"changelog/#feat_11","title":"Feat","text":"<ul> <li>base: added (#5)</li> </ul>"},{"location":"changelog/#011-2025-03-19","title":"0.1.1 (2025-03-19)","text":""},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>using new file header</li> </ul>"},{"location":"changelog/#010-2025-03-18","title":"0.1.0 (2025-03-18)","text":""},{"location":"changelog/#feat_12","title":"Feat","text":"<ul> <li>added pre-commit and ruff</li> <li>initial project setup</li> </ul>"},{"location":"changelog/#fix_4","title":"Fix","text":"<ul> <li>delete boilerplate code</li> </ul>"},{"location":"thanks/","title":"Special thanks","text":"<p>Special thanks to the following projects and people for their contributions to the development of this project:</p> <ul> <li>Python Telegram Bot</li> </ul>"},{"location":"dev/","title":"Index","text":"<p>This section of the documentation is aimed at developers contributing to the Kamihi project. It provides guidelines for understanding the architecture, setting up a development environment, and contributing effectively to the code and the documentation.</p>"},{"location":"dev/architecture/","title":"Architecture","text":"<p>This design document details Kamihi's implementation strategy for rapid Telegram bot development, evaluating architectural choices based on developer productivity, maintainability, and scalability constraints.</p>"},{"location":"dev/architecture/#problem-statement","title":"Problem Statement","text":"<p>Telegram bot development suffers from excessive complexity and repetitive boilerplate. Existing frameworks require developers to manually integrate database management, user authentication, message routing, and administrative interfaces \u2014 concerns that should be handled automatically.</p> <p>This complexity creates three critical problems:</p> <ul> <li>High development overhead: Simple bots require hundreds of lines of configuration</li> <li>Inconsistent patterns: Teams reinvent authentication and database integration differently</li> <li>Maintenance burden: Bot evolution requires coordinated changes across multiple integration layers</li> </ul>"},{"location":"dev/architecture/#solution-convention-over-configuration-architecture","title":"Solution: Convention-Over-Configuration Architecture","text":"<p>Kamihi eliminates this complexity through opinionated defaults and automatic integration. The framework provides batteries-included functionality while maintaining escape hatches for customization when needed.</p>"},{"location":"dev/architecture/#system-overview","title":"System overview","text":"<p>Kamihi's architecture centers on automatic service integration and zero-configuration defaults. The framework handles infrastructure concerns transparently, allowing developers to focus exclusively on bot behavior.</p> <pre><code>graph TD\n    A[CLI Interface] --&gt; B[Bot Layer]\n    B --&gt; C[Action Registry]\n    B --&gt; D[User Management]\n    B --&gt; E[Database Layer]\n    B --&gt; F[Telegram Client]\n    B --&gt; G[Web Admin]\n    I[Configuration] --&gt; B\n</code></pre>"},{"location":"dev/architecture/#core-components","title":"Core components","text":""},{"location":"dev/architecture/#bot-module-kamihibot","title":"Bot module (<code>kamihi.bot</code>)","text":"<p>The <code>Bot</code> class orchestrates all framework subsystems through a singleton instance. This pattern prevents configuration drift and ensures consistent state across the application.</p> <p>Actions register automatically through Python decorators, mapping functions to Telegram commands. The framework stores actions as <code>Action</code> objects containing metadata for runtime execution and administrative introspection.</p> <pre><code>from kamihi import bot\n\n@bot.action(description=\"Handle user greetings\")\ndef start(update, context):\n    return \"Hello! Bot is running.\"\n</code></pre> <p>Why singleton pattern? Multiple bot instances would create conflicting Telegram webhook registrations and database connections. The singleton ensures exactly one bot per process, preventing these conflicts.</p>"},{"location":"dev/architecture/#configuration-module-kamihibaseconfig","title":"Configuration module (<code>kamihi.base.config</code>)","text":"<p>Pydantic models provide type safety and validation for configuration. The <code>KamihiSettings</code> class loads from multiple sources in priority order: programmatic settings, YAML files, environment variables, then defaults.</p> <p>This hierarchy supports development convenience with production security. Developers use YAML files locally while production deployments rely on environment variables.</p>"},{"location":"dev/architecture/#database-module-kamihidb","title":"Database module (<code>kamihi.db</code>)","text":"<p>MongoDB integration through MongoEngine provides document-based persistence. The framework handles connection lifecycle automatically and provides base models for common bot entities.</p> <p>Why MongoDB over SQL? SQL schemas require complex migrations for changes, while MongoDB handles schema evolution transparently. This is essential for database model extensibility, given that different users of the framework will likely need to store different data schemas for the users of their bots.</p> <p>Database configuration defaults to local development (<code>mongodb://localhost:27017</code>) but supports production connection strings through configuration.</p>"},{"location":"dev/architecture/#telegram-module-kamihitg","title":"Telegram module (<code>kamihi.tg</code>)","text":"<p>The <code>TelegramClient</code> abstraction wraps <code>python-telegram-bot</code>, providing a consistent interface for message handling and API communication. This isolation protects the framework from Telegram API changes and centralizes error handling.</p>"},{"location":"dev/architecture/#web-module-kamihiweb","title":"Web module (<code>kamihi.web</code>)","text":"<p>Starlette-based admin interface runs on a separate thread, exposing user and permission management without interfering with bot operations. This separation ensures bot availability during administrative tasks.</p> <p>Non-technical users can manage bot access without code changes or deployments through the web interface.</p>"},{"location":"dev/architecture/#user-module-kamihiusers","title":"User module (<code>kamihi.users</code>)","text":"<p>Role-based access control provides built-in authentication and authorization. The system supports configurable user registration flows and permission checking for action execution.</p> <p>This eliminates custom authentication implementations while providing granular bot access control.</p>"},{"location":"dev/architecture/#cli-tool-kamihicli","title":"CLI tool (<code>kamihi.cli</code>)","text":"<p>The command-line interface manages project lifecycle: initialization, action scaffolding, user administration, and bot execution. CLI commands integrate with project templates to maintain consistent structures.</p> <pre><code>kamihi init my-bot        # Create new project\nkamihi action new greet   # Scaffold new action\nkamihi run               # Start bot with web interface\n</code></pre>"},{"location":"dev/architecture/#design-decisions-and-trade-offs","title":"Design Decisions and Trade-offs","text":""},{"location":"dev/architecture/#mongodb-vs-sql-databases","title":"MongoDB vs SQL Databases","text":"<p>Kamihi uses MongoDB instead of traditional SQL databases. This choice prioritizes rapid development and schema flexibility over strict relational integrity.</p> <p>Addressing scalability concerns: MongoDB's horizontal scaling through sharding supports bot growth from hundreds to millions of users without application changes. Document queries for user lookups and message history remain performant with proper indexing.</p>"},{"location":"dev/architecture/#singleton-bot-pattern","title":"Singleton Bot Pattern","text":"<p>The singleton pattern for the Bot class prevents multiple instances that would create conflicting webhook registrations and database connections. While this limits some advanced use cases, it eliminates the most common source of bot deployment failures. It also transfers the responsibility of managing the bot's lifecycle to the framework, simplifying application code.</p> <p>Alternative considered: Factory pattern for multiple bot instances was rejected because it complicates configuration management and provides no clear benefit for the target use case of single-bot applications.</p>"},{"location":"dev/architecture/#decorator-based-action-registration","title":"Decorator-Based Action Registration","text":"<p>Python decorators enable automatic action discovery during module import. This approach trades some flexibility for developer convenience, eliminating the need for explicit registration calls.</p> <p>Runtime discovery trade-off: All actions must be imported at startup, slightly increasing initialization time. This cost is negligible compared to the productivity gain from automatic registration, and simplifies the project structure, eliminating the need for a central registry file, and avoiding circular import errors common to these scenarios.</p>"},{"location":"dev/architecture/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"dev/architecture/#action-registration-flow","title":"Action Registration Flow","text":"<p>Actions register automatically when Python imports their modules. The CLI's <code>run</code> command recursively imports the <code>actions/</code> directory, ensuring all bot commands are available at startup.</p>"},{"location":"dev/architecture/#database-connection-lifecycle","title":"Database Connection Lifecycle","text":"<p>Database connections initialize lazily during bot startup with automatic reconnection handling for production resilience. Models inherit from framework base classes providing common fields and behaviors.</p>"},{"location":"dev/architecture/#configuration-priority-chain","title":"Configuration Priority Chain","text":"<p>Settings load through priority: programmatic overrides \u2192 YAML configuration \u2192 environment variables \u2192 defaults. This pattern supports development convenience while maintaining production security.</p>"},{"location":"dev/architecture/#why-this-architecture","title":"Why This Architecture","text":"<p>This design optimizes for developer velocity while maintaining production reliability. The architecture trades flexibility for productivity, making it optimal for teams prioritizing development speed and operational simplicity over custom infrastructure requirements.</p> <p>Reduced Cognitive Load: Developers focus on business logic rather than infrastructure integration. The framework handles database connections, user management, and Telegram API complexities automatically.</p> <p>Rapid Prototyping: New bots can be created and deployed within minutes using the CLI scaffolding tools. Template-based project generation ensures consistency across teams.</p> <p>Operational Simplicity: The web interface provides non-technical stakeholders access to user management and bot monitoring without requiring code changes or deployments.</p> <p>Testability: Clear separation between framework components and application logic enables comprehensive testing strategies. Functional tests can validate end-to-end bot behavior through Docker-based integration testing.</p> <p>Scalability Path: The modular architecture supports both simple single-command bots and complex multi-action applications. Database abstraction and connection pooling handle growing user bases without application changes.</p>"},{"location":"dev/directories/","title":"Directories","text":"<p>This page details the organizational strategy for the repository, and all its files</p>"},{"location":"dev/directories/#project-structure-overview","title":"Project Structure Overview","text":"<p>The Kamihi repository follows standard Python project conventions:</p> <pre><code>kamihi/\n\u251c\u2500\u2500 src/kamihi/                 # Source code\n\u251c\u2500\u2500 tests/                      # Test suites\n\u251c\u2500\u2500 docs/                       # Documentation source\n\u251c\u2500\u2500 README.md                   # Project overview and quick start\n\u251c\u2500\u2500 LICENSE.md                  # MIT license\n\u251c\u2500\u2500 CHANGELOG.md                # Version history\n\u251c\u2500\u2500 pyproject.toml              # Project configuration and dependencies\n\u251c\u2500\u2500 uv.lock                     # Dependency lock file\n\u251c\u2500\u2500 mkdocs.yml                  # Documentation configuration\n\u251c\u2500\u2500 .env.sample                 # Sample environment variable file\n\u251c\u2500\u2500 .python-version             # Python version specification\n\u251c\u2500\u2500 .deepsource.toml            # DeepSource configuration for static analysis\n\u251c\u2500\u2500 .pre-commit-config.yaml     # Pre-commit hooks configuration\n\u251c\u2500\u2500 .gitignore                  # Git ignore rules\n\u2514\u2500\u2500 .dockerignore               # Docker ignore rules\n</code></pre>"},{"location":"dev/directories/#source-code-organization-srckamihi","title":"Source Code Organization (<code>src/kamihi/</code>)","text":"<pre><code>src/kamihi/\n\u251c\u2500\u2500 __init__.py                 # Public API exports and bot instance\n\u251c\u2500\u2500 py.typed                    # Type checking marker\n\u251c\u2500\u2500 base/                       # Core framework utilities\n\u251c\u2500\u2500 bot/                        # Bot orchestration and action registry\n\u251c\u2500\u2500 cli/                        # Command-line interface\n\u251c\u2500\u2500 db/                         # Database abstraction layer\n\u251c\u2500\u2500 tg/                         # Telegram client integration\n\u251c\u2500\u2500 users/                      # User management and permissions\n\u2514\u2500\u2500 web/                        # Admin web interface\n</code></pre>"},{"location":"dev/directories/#base-module-srckamihibase","title":"Base module (<code>src/kamihi/base/</code>)","text":"<p>Core framework utilities that other modules depend on:</p> <pre><code>base/\n\u251c\u2500\u2500 __init__.py                 # Module exports\n\u251c\u2500\u2500 config.py                   # Pydantic configuration schemas\n\u251c\u2500\u2500 logging.py                  # Centralized logging configuration\n\u2514\u2500\u2500 manual_send.py              # Utility for sending Telegram messages manually\n</code></pre>"},{"location":"dev/directories/#cli-module-srckamihicli","title":"CLI module (<code>src/kamihi/cli/</code>)","text":"<p>Command-line interface for project management and development:</p> <pre><code>cli/\n\u251c\u2500\u2500 __init__.py                 # Module exports\n\u251c\u2500\u2500 cli.py                      # Main CLI application and context\n\u251c\u2500\u2500 commands/                   # Individual command implementations\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 init.py                 # Project initialization\n\u2502   \u251c\u2500\u2500 run.py                  # Bot execution\n\u2502   \u251c\u2500\u2500 action.py               # Action scaffolding\n\u2502   \u251c\u2500\u2500 user.py                 # User management\n\u2502   \u2514\u2500\u2500 version.py              # Version information\n\u2514\u2500\u2500 templates/                  # CLI scaffolding templates\n</code></pre>"},{"location":"dev/directories/#bot-module-srckamihibot","title":"Bot module (<code>src/kamihi/bot/</code>)","text":"<p>Core bot orchestration and action management system:</p> <pre><code>bot/\n\u251c\u2500\u2500 __init__.py                 # Module exports\n\u251c\u2500\u2500 action.py                   # Action registration and execution logic\n\u251c\u2500\u2500 bot.py                      # Main bot class and orchestration\n\u251c\u2500\u2500 utils.py                    # Bot utility functions\n\u2514\u2500\u2500 models/                     # Bot-related data models\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 registered_action.py    # Action registry data model\n</code></pre>"},{"location":"dev/directories/#database-module-srckamihidb","title":"Database module (<code>src/kamihi/db/</code>)","text":"<p>Database abstraction layer for persistent storage:</p> <pre><code>db/\n\u251c\u2500\u2500 __init__.py                 # Module exports\n\u2514\u2500\u2500 mongo.py                    # MongoDB integration and utilities\n</code></pre>"},{"location":"dev/directories/#telegram-module-srckamihitg","title":"Telegram module (<code>src/kamihi/tg/</code>)","text":"<p>Telegram client integration and message handling:</p> <pre><code>tg/\n\u251c\u2500\u2500 __init__.py                 # Module exports\n\u251c\u2500\u2500 client.py                   # Telegram client configuration\n\u251c\u2500\u2500 default_handlers.py         # Standard message handlers\n\u251c\u2500\u2500 send.py                     # Message sending utilities\n\u2514\u2500\u2500 handlers/                   # Specialized message handlers\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 auth_handler.py          # Authentication handling\n</code></pre>"},{"location":"dev/directories/#users-module-srckamihiusers","title":"Users module (<code>src/kamihi/users/</code>)","text":"<p>User management and permission system:</p> <pre><code>users/\n\u251c\u2500\u2500 __init__.py                 # Module exports\n\u251c\u2500\u2500 users.py                    # User management logic\n\u2514\u2500\u2500 models/                     # User-related data models\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 permission.py           # Permission model\n    \u251c\u2500\u2500 role.py                 # Role-based access control\n    \u2514\u2500\u2500 user.py                 # User data model\n</code></pre>"},{"location":"dev/directories/#web-module-srckamihiweb","title":"Web module (<code>src/kamihi/web/</code>)","text":"<p>Admin web interface for bot management:</p> <pre><code>web/\n\u251c\u2500\u2500 __init__.py                 # Module exports\n\u251c\u2500\u2500 views.py                    # Web view controllers\n\u251c\u2500\u2500 web.py                      # Web application configuration\n\u251c\u2500\u2500 static/                     # Static web assets\n\u2502   \u2514\u2500\u2500 images/                 # Image resources\n\u2514\u2500\u2500 templates/                  # HTML templates\n    \u2514\u2500\u2500 home.html               # Main dashboard template\n</code></pre>"},{"location":"dev/directories/#documentation-structure-docs","title":"Documentation structure (<code>docs/</code>)","text":"<p>Documentation follows the Di\u00e1taxis framework for comprehensive coverage:</p> <pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Landing page and overview\n\u251c\u2500\u2500 changelog.md                # User-facing version history\n\u251c\u2500\u2500 thanks.md                   # Acknowledgments\n\u251c\u2500\u2500 tutorials/                  # Learning-oriented guides\n\u251c\u2500\u2500 guides/                     # Task-oriented how-to documentation\n\u251c\u2500\u2500 reference/                  # Technical reference material\n\u251c\u2500\u2500 dev/                        # Documentation for developers and contributors of the project\n\u251c\u2500\u2500 images/                     # Documentation assets\n\u2514\u2500\u2500 stylesheets/                # Custom documentation styling\n</code></pre>"},{"location":"dev/directories/#test-structure-tests","title":"Test structure (<code>tests/</code>)","text":"<p>Testing structure mirrors source code organization while supporting multiple testing strategies:</p> <pre><code>tests/\n\u251c\u2500\u2500 __init__.py                 # Test package initialization\n\u251c\u2500\u2500 unit/                       # Fast, isolated unit tests\n\u2514\u2500\u2500 functional/                 # Integration tests with Docker\n</code></pre>"},{"location":"dev/documentation/","title":"Documentation","text":"<p>This guide details the documentation standards and contribution process for the Kamihi project, establishing clear guidelines to ensure consistency, clarity, and maintainability across all project documentation.</p>"},{"location":"dev/documentation/#intended-audiences","title":"Intended audiences","text":"<p>Documentation in this project serves multiple audiences: new users learning to use the tools, knowledgeable developers implementing features and new contributors seeking to understand the codebase. The documentation you write should take into account your intended audience.</p>"},{"location":"dev/documentation/#style-guide","title":"Style guide","text":""},{"location":"dev/documentation/#writing-principles","title":"Writing Principles","text":"<p>Clarity and Conciseness: Write for your future self and new contributors. Every sentence should serve a purpose. Remove unnecessary words and avoid redundant explanations.</p> <p>Active Voice: Use active voice consistently. Write \"Run the command\" instead of \"The command should be run.\"</p> <p>Present Tense: Document current functionality in present tense. Write \"The function returns\" instead of \"The function will return.\"</p>"},{"location":"dev/documentation/#language-standards","title":"Language Standards","text":"<p>Technical Terminology: Use precise technical terms consistently. When introducing new concepts, provide brief explanations or link to definitions.</p> <p>Code References: Use backticks for inline code, function names, file paths, and configuration values. Example: <code>uv run mkdocs serve</code> or <code>setup.md</code>.</p> <p>Commands and Examples: Provide complete, runnable examples. Include expected output when helpful for verification.</p>"},{"location":"dev/documentation/#formatting-conventions","title":"Formatting Conventions","text":"<p>Headers: Use sentence case for headers. Follow the established hierarchy: - <code>##</code> for main sections - <code>###</code> for subsections - <code>####</code> for detailed topics</p> <p>Note</p> <p>The first-level header (<code>#</code>) is filled by the documentation framework from the title in <code>mkdocs.yml</code>. Use <code>##</code> for the first-level sections of your document.</p> <p>Lists: Use bullet points for unordered information, numbered lists for sequential steps. Keep list items parallel in structure.</p> <p>Code Blocks: Specify language for syntax highlighting. Include the command prompt or expected environment when relevant:</p> <pre><code>&gt; uv run mkdocs serve\n</code></pre> <p>File Paths: Use relative paths when possible. Always include the filepath comment for documentation files.</p>"},{"location":"dev/documentation/#content-organization","title":"Content Organization","text":"<p>One Concept Per Section: Each section should focus on a single main idea that can be summarized in one sentence.</p> <p>Logical Flow: Structure content to build understanding progressively. Start with concepts, then provide implementation details.</p> <p>Cross-References: Link related sections and external resources. Use descriptive link text rather than \"click here.\" Always use relative links to maintain portability across environments.</p>"},{"location":"dev/documentation/#organization","title":"Organization","text":"<p>This project uses MkDocs with Material theme for documentation generation. The documentation follows a \"docs-as-code\" approach, versioned alongside the codebase.</p> <p>File Structure: - <code>/docs/</code> - All documentation source files - <code>/docs/tutorials/</code> - Step-by-step learning guides for new users - <code>/docs/guides/</code> - Task-oriented how-to documentation organized by topic - <code>/docs/reference/</code> - Technical reference material (CLI, API) - <code>/docs/explanation/</code> - Conceptual documentation and background theory - <code>/docs/dev/</code> - Developer-focused documentation for contributors - <code>/docs/images/</code> - Documentation assets and media files - <code>/docs/stylesheets/</code> - Custom CSS for documentation styling - <code>mkdocs.yml</code> - Site configuration and navigation structure</p>"},{"location":"dev/documentation/#contribution-workflow","title":"Contribution Workflow","text":"<p>Documentation Changes: Include documentation updates in the same pull request as related code changes. This ensures synchronization and provides context for reviewers.</p> <p>Review Process: Documentation changes undergo the same review process as code. Reviewers should verify accuracy, clarity, and adherence to style guidelines.</p> <p>Testing: Always test documentation locally before submitting. Verify that code examples work and links resolve correctly.</p>"},{"location":"dev/documentation/#documentation-live","title":"Documentation live","text":"<p>You can view the documentation on a local server with live reload. For that, and assuming you have the project set up following the setup guide, run:</p> <pre><code>uv run mkdocs serve\n</code></pre> <p>This will start a local server at <code>http://localhost:8000</code>, where you can see the documentation. The server will automatically reload when you make changes to the documentation files.</p>"},{"location":"dev/setup/","title":"Development setup","text":"<p>This guide will help you set up the development environment for the project.</p>"},{"location":"dev/setup/#prerequisites","title":"Prerequisites","text":"<p>You should have the following installed:</p> <ul> <li><code>git</code>, for version control. You can find download and installation instructions here.</li> <li><code>uv</code>, for managing virtual environments and dependencies. Install it using this guide.</li> <li>(optional) <code>docker</code> and <code>docker compose</code>, for running the database and functional tests. You can install Docker Desktop from here or follow the instructions for Docker Engine and Docker Compose.</li> <li>(if not using Docker) <code>mongodb</code>, for running the database locally. You can find installation instructions here.</li> </ul>"},{"location":"dev/setup/#setting-up-the-project","title":"Setting up the project","text":"<ol> <li>Clone the repository:     <pre><code>git clone https://github.com/kamihi-org/kamihi.git\ncd kamihi\n</code></pre></li> <li>Create the virtual environment and install dependencies:     <pre><code>uv sync --all-packages --all-groups\n</code></pre></li> <li>Activate the virtual environment by restarting your terminal or sourcing the <code>activate</code> file for your terminal type:     <pre><code># For bash/zsh\nsource .venv/bin/activate\n\n# For fish\nsource .venv/bin/activate.fish\n\n# For csh/tcsh\nsource .venv/bin/activate.csh\n\n# For powershell\n. .venv/Scripts/Activate.ps1\n</code></pre></li> <li>(optional) We recommend also setting up a test project to experiment with the framework and the code you write. Just create a new project using the CLI, and substitute the <code>pyproject.toml</code> file with this one:     <pre><code>[project]\nname = \"kamihi-example\"\nversion = \"0.0.0\"\ndescription = \"Kamihi project\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\n    \"kamihi\",\n]\n\n[tool.uv.sources]\nkamihi = { path = \"&lt;the path to the kamihi project&gt;\", editable = true }\n</code></pre></li> </ol> <p>For more information specific to documentation and testing, refer to the documentation guide and the testing guide.</p>"},{"location":"dev/testing/","title":"Testing","text":"<p>This guide explains how to run and develop tests for the Kamihi project, including unit and functional tests.</p>"},{"location":"dev/testing/#unit-testing","title":"Unit testing","text":"<p>Unit tests are located in the <code>tests/unit</code> directory. They are organized in the same way as the source code, with a folder per module, each with one or more test files that normally correspond to the files in the module.</p> <p>Unit tests are written using <code>pytest</code>. Once the project has been correctly set up following the setup guide, you just need to install their dependencies and run them:</p> <pre><code>$ uv sync --group unit\n$ uv run pytest tests/unit\n</code></pre>"},{"location":"dev/testing/#functional-testing","title":"Functional testing","text":"<p>Note</p> <p>Functional tests make use of automated Docker container deployments, and thus are very resource-intensive. Make sure your machine is powerful enough to handle them.</p> <p>Warning</p> <p>As of the time of writing this documentation, it is not possible to run functional tests unless you have an iOS device for the initial setup. This is because for now creating test accounts can only be done through the Telegram app on iOS. This is a limitation of Telegram, not Kamihi.</p> <p>Functional tests are located in the <code>tests/functional</code> directory. They are organized by feature, based loosely on the structure of the source code but not constrained by it.</p>"},{"location":"dev/testing/#setup","title":"Setup","text":"<p>Running functional tests requires a bit more setup, as they run on Telegram's test accounts (to avoid bans and FLOOD errors). To create the environment needed for them, you can follow these steps:</p> <ol> <li>Install the dependencies:     <pre><code>$ uv sync --group unit --group func\n</code></pre></li> <li>Make sure you have Docker and Docker Compose installed on your machine.     <pre><code>$ docker --version\n$ docker compose --version\n</code></pre></li> <li>Create a <code>.env</code> file in the root of the project with the following content, which we will fill in as we go along:     <pre><code>KAMIHI_TESTING__BOT_TOKEN=\nKAMIHI_TESTING__BOT_USERNAME=\nKAMIHI_TESTING__USER_ID=/\nKAMIHI_TESTING__TG_PHONE_NUMBER=/\nKAMIHI_TESTING__TG_API_ID=/\nKAMIHI_TESTING__TG_API_HASH=/\nKAMIHI_TESTING__TG_SESSION=/\nKAMIHI_TESTING__TG_DC_ID=/\nKAMIHI_TESTING__TG_DC_IP=/\n</code></pre></li> <li>Go to your Telegram account's developer panel, sign in with your account, and create a new application.</li> <li>From the 'App configuration' section, you can obtain the values for <code>TG_API_ID</code> (App api_id) and <code>TG_API_HASH</code> (App api_hash).</li> <li>From the 'Available MTProto Servers' section, you can obtain the values for <code>TG_DC_IP</code> (Text field besides 'Test configuration:') and <code>TG_DC_ID</code> (Number just below the IP, prepended by 'DC'). Beware that <code>TG_DC_ID</code> is just the number, without the 'DC' prefix.</li> <li>You need an account on the test servers so you don't hit limitations or risk a ban on your main account. To create a test account:<ol> <li>Get the Telegram app on iOS, if you don't have it already, and log in with your main account (or with any account, really).</li> <li>Tap the Settings icon in the bottom bar ten times to access the developer settings.</li> <li>Select 'Accounts', then 'Login to another account', then 'Test'</li> <li>Input your phone number (must be a valid number that can receive SMS) and tap 'Next', confirm the phone and input the code you receive via SMS.</li> </ol> </li> <li>(optional) You can log in with the test account on the desktop application following this steps:<ol> <li>Go to the sidebar</li> <li>While holding Alt and Shift, right-click on the 'Add account' button</li> <li>Select 'Test server'</li> <li>Log in by scanning the QR code from the Telegram app on iOS that has the test account</li> </ol> </li> <li>Once you hace the test account created, you can fill the value for <code>TG_PHONE_NUMBER</code> with the one you used for the test account, including international prefix and no spaces or other characters, e.g. +15559786475.</li> <li>Now you must obtain your test account's Telegram User ID. The easiest is to message one of the many bots that will provide it for you, like this one. This value corresponds to the `USER_ID' environment variable.</li> <li>For the tests to be able to log in without any user input, two-factor authentication must be skipped. For that to happen, we need a session token. We have a script for that, so to obtain the token, run the following command from the root of the project after having filled in all the values from the previous steps in the <code>.env</code> file:     <pre><code>$ uv run tests/functional/utils/get_string_session.py\n</code></pre>     This value can then be added to the <code>.env</code> file in the <code>TG_SESSION</code> variable.</li> <li>Last, but not least, we need a bot to test on. From your test account, talk to the @BotFather and fill in the <code>BOT_TOKEN</code> and <code>BOT_USERNAME</code> values in the <code>.env</code> file.</li> </ol> <p>Once this odyssey has been completed, you should be able to run the functional tests with the following command:</p> <pre><code>$ uv run pytest tests/functional\n</code></pre>"},{"location":"dev/testing/#available-fixtures","title":"Available fixtures","text":"<p>The functional test suite comes with several convenience fixtures to make writing tests easier:</p>"},{"location":"dev/testing/#core-testing-infrastructure","title":"Core testing infrastructure","text":"<ul> <li><code>test_settings</code> - Provides <code>TestingSettings</code> instance with all configuration values from environment variables and <code>.env</code> file.</li> <li><code>tg_client</code> - Session-scoped Telegram client for interacting with the test bot, automatically connects and disconnects. Ideally, instead of using this fixture, you should use...</li> <li><code>chat</code> - Opens a conversation with the test bot using the test user, providing a <code>Conversation</code> object for sending/receiving messages.</li> </ul>"},{"location":"dev/testing/#application-structure-fixtures","title":"Application structure fixtures","text":"<p>These fixtures provide the content of the project under test in the container. All of them are dictionaries where the keys represent the paths of the files and the values represent the contents. Directories get created automatically. You can override them to provide custom content for testing:</p> <ul> <li><code>pyproject</code> - Returns a dictionary with <code>pyproject.toml</code> as key and the file content as value.</li> <li><code>config_file</code> - Returns a dictionary with <code>kamihi.yml</code> as key and the file content as value.</li> <li><code>actions_folder</code> - Dictionary representing the actions folder structure and all its files. Gets <code>actions/</code> prepended to all keys at runtime.</li> <li><code>models_folder</code> - Dictionary representing the models folder structure and all its files. Gets <code>models/</code> prepended to all keys at runtime.</li> <li><code>app_folder</code> - Combines all application files into a single dictionary for container mounting. Not to be overridden unless you know what you're doing.</li> </ul>"},{"location":"dev/testing/#container-and-database-fixtures","title":"Container and database fixtures","text":"<ul> <li><code>mongo_container</code> - MongoDB container instance for database operations.</li> <li><code>kamihi_container</code> - Custom <code>KamihiContainer</code> instance with enhanced logging and control methods.</li> <li><code>kamihi</code> - Main fixture that ensures the Kamihi container is started and ready for testing. This is the one you should use in your tests to interact with the Kamihi application, unless for some reason you need to use the application before it is fully started, in which case you can use the <code>kamihi_container</code> fixture directly.</li> </ul>"},{"location":"dev/testing/#database-fixtures","title":"Database fixtures","text":"<ul> <li><code>mongodb</code> - MongoDB client connected to the test database using Pymongo, for manually editing the database during tests.</li> </ul>"},{"location":"dev/testing/#user-management-fixtures","title":"User management fixtures","text":"<ul> <li><code>user_custom_data</code> - Dictionary for custom user data (empty by default, can be overridden). To be used with the <code>models_folder</code> fixture to test with custom user models.</li> <li><code>user_in_db</code> - Creates a test user using the test user ID in the database and returns the user document.</li> <li><code>add_permission_for_user</code> - Generator fixture that returns a function to add permissions to users for specific actions.</li> </ul>"},{"location":"dev/testing/#web-interface-fixtures","title":"Web interface fixtures","text":"<ul> <li><code>admin_page</code> - Provides an asynchronous Playwright <code>Page</code> object for the Kamihi admin interface.</li> </ul>"},{"location":"dev/testing/#content-functions","title":"Content functions","text":"<p>These are not fixtures, you must import them directly from <code>tests.conftests</code> and use them as normal functions, not in the test function signature:</p> <ul> <li><code>random_image()</code> - Returns a random image file in bytes format, useful for testing image uploads.</li> <li><code>random_video_path()</code> - Returns a random video file path from <code>tests/static/videos</code>, useful for testing video uploads.</li> <li><code>random_audio_path()</code> - Returns a random audio file path from <code>tests/static/audios</code>, useful for testing audio uploads.</li> <li><code>random_voice_note_path()</code> - Returns a random voice message file path from <code>tests/static/audios</code>, useful for testing voice messages.</li> </ul>"},{"location":"dev/testing/#utility-fixtures","title":"Utility fixtures","text":"<ul> <li><code>run_command</code> - Sets the command for running the bot in the container (<code>\"kamihi run\"</code> by default).</li> <li><code>sync_and_run_command</code> - UV-wrapped version of the run command. Do not override this unless you know what you're doing, as it will probably make your tests fail.</li> <li><code>cleanup</code> - Session-scoped fixture that cleans up Docker resources after tests complete.</li> </ul>"},{"location":"dev/testing/#kamihicontainer-methods","title":"KamihiContainer methods","text":"<p>The <code>KamihiContainer</code> class extends the base container with additional methods:</p> <ul> <li><code>logs(stream=False)</code> - Get container logs as a list or stream</li> <li><code>parse_log_json(line)</code> - Parse JSON log entries from the container</li> <li><code>wait_for_log(message, level=\"INFO\", extra_values=None)</code> - Wait for specific log entries</li> <li><code>wait_for_message(message)</code> - Wait for messages without JSON parsing</li> <li><code>assert_logged(level, message)</code> - Assert that a log entry was sent</li> <li><code>wait_until_started()</code> - Wait until the container is fully started</li> <li><code>run(command)</code> - Execute commands in the container</li> <li><code>run_and_wait_for_log(command, message)</code> - Run command and wait for specific log output</li> <li><code>run_and_wait_for_message(command, message)</code> - Run command and wait for an specific message, without JSON parsing</li> <li><code>stop()</code> - Gracefully stop the container</li> </ul>"},{"location":"dev/testing/#using-the-fixtures","title":"Using the fixtures","text":""},{"location":"dev/testing/#basic-test-structure","title":"Basic test structure","text":"<p>Most functional tests follow this pattern:</p> <pre><code>@pytest.mark.asyncio\n@pytest.mark.usefixtures(\"kamihi\")\nasync def test_my_feature(user_in_db, add_permission_for_user, chat):\n    \"\"\"Test description.\"\"\"\n    # Setup permissions\n    add_permission_for_user(user_in_db, \"my_action\")\n\n    # Test interaction\n    await chat.send_message(\"/my_command\")\n    response = await chat.get_response()\n\n    # Assertions\n    assert response.text == \"expected response\"\n</code></pre>"},{"location":"dev/testing/#overriding-fixtures","title":"Overriding fixtures","text":""},{"location":"dev/testing/#file-level-overrides","title":"File-level overrides","text":"<p>Override fixtures for an entire test file by redefining the fixture:</p> <pre><code>@pytest.fixture\ndef run_command():\n    \"\"\"Override to test without full startup.\"\"\"\n    return \"sleep infinity\"\n\n@pytest.fixture\ndef actions_folder():\n    \"\"\"Custom actions for all tests in this file.\"\"\"\n    return {\n        \"start/__init__.py\": \"\",\n        \"start/start.py\": \"\"\"\\\n            from kamihi import bot\n\n            @bot.action\n            async def start():\n                return \"Hello World!\"\n        \"\"\",\n    }\n\ndef test_my_feature(kamihi, chat):\n    # All tests in this file use the overridden fixtures\n    pass\n</code></pre>"},{"location":"dev/testing/#function-level-overrides","title":"Function-level overrides","text":"<p>Override fixtures for specific tests by decorating individual functions:</p> <pre><code>@pytest.mark.parametrize(\"user_custom_data\", [{\"name\": \"John Doe\"}])\n@pytest.mark.parametrize(\n    \"models_folder\",\n    [\n        {\n            \"user.py\": \"\"\"\\\n                from kamihi import bot, BaseUser\n                from mongoengine import StringField\n\n                @bot.user_class\n                class MyCustomUser(BaseUser):\n                    name: str = StringField()\n            \"\"\",\n        }\n    ],\n)\nasync def test_custom_user_model(user_in_db, chat, models_folder):\n    # This test uses custom user model and data\n    pass\n</code></pre>"},{"location":"dev/testing/#common-patterns","title":"Common patterns","text":""},{"location":"dev/testing/#using-test-media-files","title":"Using test media files","text":"<p>You can use the provided utility functions to add media files to your tests:</p> <pre><code>@pytest.mark.asyncio\n@pytest.mark.usefixtures(\"kamihi\")\n@pytest.mark.parametrize(\n    \"actions_folder\",\n    [\n        (\n            {\n                \"start/__init__.py\": \"\",\n                \"start/start.py\": \"\"\"\\\n                    from pathlib import Path\n                    from kamihi import bot\n\n                    @bot.action\n                    async def start() -&gt; list[bot.Photo]:\n                        return [\n                            bot.Photo(Path(\"actions/start/image.jpg\")),\n                            bot.Video(Path(\"actions/start/video.mp4\")),\n                            bot.Audio(Path(\"actions/start/audio.mp3\")),\n                            bot.Voice(Path(\"actions/start/audio.m4a\")),\n                        ]\n                \"\"\",\n                \"start/image.jpg\": random_image(),\n                \"start/video.mp4\": random_video_path().read_bytes(),\n                \"start/audio.mp3\": random_audio_path().read_bytes(),\n                \"start/audio.m4a\": random_voice_note_path().read_bytes(),\n            },\n        ),\n    ]\n)\nasync def test(..., actions_folder): ...\n</code></pre>"},{"location":"dev/testing/#testing-cli-commands","title":"Testing CLI commands","text":"<pre><code>def test_cli_validation(kamihi):\n    \"\"\"Test invalid CLI parameters.\"\"\"\n    kamihi.run_and_wait_for_message(\n        \"kamihi run --port=invalid\",\n        \"Invalid value for '--port'\"\n    )\n</code></pre> <p>If testing the <code>kamihi run</code> command, you can override the <code>run_command</code> fixture to avoid starting the application twice, which will generate conflicts:</p> <pre><code>@pytest.fixture\ndef run_command():\n    \"\"\"Override to test CLI without full application startup.\"\"\"\n    return \"sleep infinity\"\n</code></pre>"},{"location":"dev/testing/#testing-web-interface","title":"Testing web interface","text":"<pre><code>@pytest.mark.asyncio\nasync def test_web_feature(admin_page):\n    \"\"\"Test admin interface functionality.\"\"\"\n    await admin_page.get_by_role(\"link\", name=\"Users\").click()\n    await admin_page.get_by_role(\"button\", name=\"+ New User\").click()\n    # Continue with Playwright interactions\n</code></pre>"},{"location":"dev/testing/#testing-bot-actions-with-custom-code","title":"Testing bot actions with custom code","text":"<pre><code>@pytest.mark.parametrize(\n    \"actions_folder\",\n    [\n        {\n            \"greet/__init__.py\": \"\",\n            \"greet/greet.py\": \"\"\"\\\n                from kamihi import bot\n\n                @bot.action\n                async def greet(user):\n                    return f\"Hello {user.telegram_id}!\"\n            \"\"\",\n        }\n    ],\n)\nasync def test_greeting(user_in_db, add_permission_for_user, chat, actions_folder):\n    \"\"\"Test custom greeting action.\"\"\"\n    add_permission_for_user(user_in_db, \"greet\")\n\n    await chat.send_message(\"/greet\")\n    response = await chat.get_response()\n\n    assert str(user_in_db['telegram_id']) in response.text\n</code></pre>"},{"location":"dev/testing/#best-practices","title":"Best practices","text":"<ul> <li>Use <code>@pytest.mark.usefixtures(\"kamihi\")</code> when you need the container running but don't directly interact with it</li> <li>Always add permissions before testing bot actions using <code>add_permission_for_user</code>, otherwise the bot will respond with the default message.</li> <li>Use <code>dedent()</code> for multiline code strings to maintain readable indentation</li> <li>Override <code>run_command</code> to <code>\"sleep infinity\"</code> when testing CLI without full application startup</li> <li>Parametrize at file level when multiple tests need the same overrides</li> <li>Do not use test classes; functional tests should be simple functions</li> <li>Use meaningful test descriptions that explain the specific scenario being tested</li> <li>Use <code>wait_for_log</code> with specific log levels, messages and extra dictionary contents, if there should be any.</li> </ul>"},{"location":"guides/","title":"Index","text":"<p>In this section, we will cover some of the most common use cases for Kamihi, providing guides on how to implement them.</p>"},{"location":"guides/key-concepts/","title":"Key concepts","text":"<p>These are the most important concepts and definitions used throughout this documentation.</p>"},{"location":"guides/key-concepts/#action","title":"Action","text":"<p>An action is, in its most basic terms, something you can do with your bot. You are in charge of defining them.</p>"},{"location":"guides/key-concepts/#command","title":"Command","text":"<p>A command is a string sent to your bot through Telegram that executes an action. They are always prefixed with a slash (for example, <code>/start</code> or <code>/hello</code>). </p> <p>Info</p> <p>An action may have many commands assigned.</p>"},{"location":"guides/key-concepts/#user","title":"User","text":"<p>A user is someone that has been registered in the framework. Only they can use the actions you define.</p>"},{"location":"guides/key-concepts/#role","title":"Role","text":"<p>A role is, in essence, a group of users. Roles are most commonly used to grant them permission to use actions. Many users can have one role, and users can also have many roles.</p>"},{"location":"guides/key-concepts/#permission","title":"Permission","text":"<p>A permission is a record that tells the bot which users and roles can use which actions. You can have many permissions for each action, each targeting as many users and roles as you want.</p>"},{"location":"guides/actions/commands/","title":"Set commands","text":"<p>This guide explains how command names are assigned from actions and how to customize them.</p>"},{"location":"guides/actions/commands/#default-command","title":"Default command","text":"<p>When decorating a function to turn it into an action, the command will be the name of the function. For example:</p> <pre><code>from kamihi import bot\n\n@bot.action\nasync def test() -&gt; str:\n    return \"Test successful!\"\n</code></pre> <p>This code will register the command <code>/test</code> on Telegram.</p>"},{"location":"guides/actions/commands/#changing-the-default-command","title":"Changing the default command","text":"<p>Sometimes we do not want to use the name of the function name as our command. We can easily change it by passing the command we want to the decorator:</p> <pre><code>from kamihi import bot\n\n@bot.action(\"hello\")\nasync def test() -&gt; str:\n    return \"Test successful!\"\n</code></pre> <p>This will register the command <code>/hello</code> instead of the command <code>/test</code> in Telegram.</p>"},{"location":"guides/actions/commands/#assigning-multiple-commands","title":"Assigning multiple commands","text":"<p>Extending the previous example, we can easily assign multiple commands to an action by passing them to the decorator:</p> <pre><code>from kamihi import bot\n\n@bot.action(\"hello\", \"hola\", \"allo\")\nasync def test() -&gt; str:\n    return \"Test successful!\"\n</code></pre> <p>With this code, all three commands will be registered in Telegram and all will execute the same function <code>test()</code>. </p> <p>Info</p> <p>In this case the function name will not be registered as a command.</p>"},{"location":"guides/actions/send-media/","title":"Send media and files","text":"<p>This guide details how to send any type of media supported by Kamihi.</p>"},{"location":"guides/actions/send-media/#sending-media","title":"Sending media","text":"<p>There are two ways of sending media using Kamihi:</p> <ul> <li>Implicit: you return a <code>Path</code> object in your function, and the framework automatically detects the best way of sending the file.</li> <li>Explicit: you return a <code>bot.Media</code> subclass that tells the framework how to treat the file.</li> </ul> ImplicitExplicit <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n@bot.action\nasync def start() -&gt; Path:\n    return Path(\"actions/start/file.txt\")\n</code></pre> <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n@bot.action\nasync def start() -&gt; bot.Document:\n    return bot.Document(\"actions/start/file.txt\")\n</code></pre> <p>Warning</p> <p>Only media types based on files can be sent implicitly.</p>"},{"location":"guides/actions/send-media/#supported-media-types","title":"Supported media types","text":"<p>Kamihi supports sending the following media types:</p> Media Type Allowed formats Max. size Notes Documents <code>bot.Document</code> Any 50MB Default sending mode Photos <code>bot.Photo</code> JPG  PNG  GIF  WEBP 10MB - Videos <code>bot.Video</code> MP4 50MB - Audios <code>bot.Audio</code> MP3  M4A 50MB If less than 1MB, it will be detected as a voice note Voice notes <code>bot.Voice</code> MP3  M4A  OGG (Opus) 1MB If more than 1MB, it will be detected as audio Media groups (albums) <code>list</code> - - Only sent as group if all items are of the same type (Photo and Video are considered equal) Location <code>bot.Location</code> - - Defined by latitude, longitude and optional horizontal accuracy"},{"location":"guides/actions/send-media/#examples","title":"Examples","text":"DocumentsPhotosVideosAudiosVoice notesMedia groupsLocation <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n# implicit\n@bot.action\nasync def start() -&gt; Path:\n    return Path(\"actions/start/file.txt\")\n\n# explicit\n@bot.action\nasync def start() -&gt; bot.Document:\n    return bot.Document(\"actions/start/file.txt\")\n</code></pre> <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n# implicit\n@bot.action\nasync def start() -&gt; Path:\n    return Path(\"actions/start/image.jpg\")\n\n# explicit\n@bot.action\nasync def start() -&gt; bot.Photo:\n    return bot.Photo(Path(\"actions/start/image.jpg\"))\n</code></pre> <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n# implicit\n@bot.action\nasync def start() -&gt; Path:\n    return Path(\"actions/start/video.mp4\")\n\n# explicit\n@bot.action\nasync def start() -&gt; bot.Video:\n    return bot.Video(Path(\"actions/start/video.mp4\"))\n</code></pre> <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n# implicit\n@bot.action\nasync def start() -&gt; Path:\n    return Path(\"actions/start/audio.mp3\")\n\n# explicit\n@bot.action\nasync def start() -&gt; bot.Audio:\n    return bot.Audio(Path(\"actions/start/audio.mp3\"))\n</code></pre> <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n# implicit\n@bot.action\nasync def start() -&gt; Path:\n    return Path(\"actions/start/voice.ogg\")\n\n# explicit\n@bot.action\nasync def start() -&gt; bot.Voice:\n    return bot.Voice(Path(\"actions/start/voice.ogg\"))\n</code></pre> <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n# implicit\n@bot.action\nasync def start() -&gt; list[Path]:\n    return [\n        Path(\"actions/start/image1.jpg\"),\n        Path(\"actions/start/image2.jpg\"),\n        Path(\"actions/start/video.mp4\")\n    ]\n\n# explicit\n@bot.action\nasync def start() -&gt; list[bot.Audio]:\n    return [\n        bot.Photo(Path(\"actions/start/audio1.mp3\")),\n        bot.Photo(Path(\"actions/start/audio2.mp3\")),\n    ]\n</code></pre> <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n# explicit\n@bot.action\nasync def start() -&gt; bot.Location:\n    return bot.Location(latitude=37.7749, longitude=-122.4194, horizontal_accuracy=100)\n</code></pre>"},{"location":"guides/actions/send-media/#adding-captions","title":"Adding captions","text":"<p>Adding captions to media you send is only possible when marking the type of media explicitly. You just need to pass the <code>caption</code> keyword argument to the constructor of the media type.</p> <pre><code>from kamihi import bot\nfrom pathlib import Path\n\n@bot.action\nasync def start() -&gt; bot.Document:\n    return bot.Document(Path(\"actions/start/file.txt\"), caption=\"This is a file caption.\")\n</code></pre> <p>Info</p> <p>To caption media groups, there are two options:</p> <ul> <li>Caption every item in the group with their own caption by passing the <code>caption</code> keyword argument.</li> <li>Caption just the first item in the group, and it will be used as the caption for the entire group.</li> </ul>"},{"location":"guides/actions/send-multiple/","title":"Send multiple messages","text":"<p>This guide shows how to send multiple messages in a single action.</p> <p>It is as easy as returning a list of messages from an action. Kamihi will take care of sending each message in the list to the user.</p> <pre><code>from kamihi import bot\n\n@bot.action\ndef start() -&gt; list[str]:\n    return [\n        \"Hello, world!\",\n        \"This is the second message.\",\n        \"And this is the third one.\",\n    ]\n</code></pre> <p>The list accepts any type that can be sent by its own. For example, you can return a list of <code>bot.Photo</code>, <code>bot.Video</code>, or even a mix of different types.</p> <p>For more information on how lists of media files are handled, see the send media guide.</p>"},{"location":"guides/actions/use-templates/","title":"Use templates","text":"<p>This guide describes how to use templates in Kamihi actions to create dynamic messages and content. Templates allow you to define a structure for your messages while dynamically inserting values at runtime.</p>"},{"location":"guides/actions/use-templates/#writing-templates","title":"Writing templates","text":"<p>Templates in Kamihi are created using Jinja2 syntax. You can create a template by defining a string with placeholders that will be replaced with actual values when the action is executed. For example:</p> <pre><code>Hello, {{ user.name }}! Welcome to our service.\n</code></pre> <p>You can also use more complex expressions and control structures, such as loops and conditionals, to create dynamic content. For example:</p> <pre><code>{% if user.is_premium %}\nThank you for being a premium member, {{ user.name }}!\n{% else %}\nThank you for using our service, {{ user.name }}! Consider upgrading to premium for more features.\n{% endif %}\n</code></pre> <p>Info</p> <p>For more information on Jinja2 syntax, refer to the Jinja2 documentation.</p>"},{"location":"guides/actions/use-templates/#storing-templates","title":"Storing templates","text":"<p>Templates are stored in the folder of the action that uses them. The template file must have a <code>.md.jinja</code> extension, indicating that it is a Markdown template processed by Jinja2.</p> <p>By default, Kamihi will look for a template file with the same name as the action in the action's folder. For example, if your action is <code>start</code>, Kamihi will look for a file named <code>start.md.jinja</code> in the <code>actions/start/</code> directory.</p>"},{"location":"guides/actions/use-templates/#using-templates-in-actions","title":"Using templates in actions","text":"<p>To use templates in Kamihi actions, you request the <code>template</code> parameter in the action's parameters. For example:</p> actions/start/start.pyactions/start/start.md.jinja <pre><code>from kamihi import bot\nfrom jinja2 import Template\n\n@bot.action\nasync def start(template: Template):\n    return template.render(name=\"John Doe\")\n</code></pre> <pre><code>Hello, {{ name }}! Welcome to our service.\n</code></pre>"},{"location":"guides/actions/use-templates/#templates-with-custom-names","title":"Templates with custom names","text":"<p>If you want to use a template with a custom name, you can specify the template file in the action's parameters using the Annotated syntax. For example:</p> actions/start/start.pyactions/start/custom_template_name.md.jinja <pre><code>from kamihi import bot\nfrom jinja2 import Template\nfrom typing import Annotated\n\n@bot.action\nasync def custom_action(template: Annotated[Template, \"custom_template_name.md.jinja\"]):\n    return template.render(name=\"John Doe\")\n</code></pre> <pre><code>Hello, {{ name }}! This is a custom template.\n</code></pre> <p>Kamihi will look recursively for the template file in the same directory as the action, meaning that you can organize your templates in subdirectories if needed, but in the Annotation you should only specify the file name, not the path. </p> <p>For example, if you have a template in <code>actions/start/templates/custom_template_name.md.jinja</code>, you use it with the annotation <code>Annotated[Template, \"custom_template_name.md.jinja\"]</code>.</p>"},{"location":"guides/actions/use-templates/#using-multiple-templates","title":"Using multiple templates","text":"<p>You can also use multiple templates in a single action. To do this, you can define multiple template parameters in the action's signature, as long as they all start with the <code>template</code> prefix. For example:</p> actions/start/start.pyactions/start/main_template.md.jinjaactions/start/secondary_template.md.jinja <pre><code>from kamihi import bot\nfrom jinja2 import Template\nfrom typing import Annotated\n\n@bot.action\nasync def multi_template_action(\n    template_main: Annotated[Template, \"main_template.md.jinja\"],\n    template_secondary: Annotated[Template, \"secondary_template.md.jinja\"]\n):\n    main_content = template_main.render(name=\"John Doe\")\n    secondary_content = template_secondary.render(name=\"John Doe\")\n    return f\"{main_content}\\n\\n{secondary_content}\"\n</code></pre> <pre><code>Hello, {{ name }}! This is the main template.\n</code></pre> <pre><code>Hello, {{ name }}! This is the secondary template.\n</code></pre> <p>You can also mix and match between the default template and custom templates. For example, you can use the default template for the main content and a custom template for the secondary content:</p> <pre><code>from kamihi import bot\nfrom jinja2 import Template\nfrom typing import Annotated\n\n@bot.action\nasync def mixed_template(\n    template: Template,  # Default template at `mixed_template.md.jinja`\n    template_secondary: Annotated[Template, \"secondary_template.md.jinja\"]\n):\n    main_content = template.render(name=\"John Doe\")\n    secondary_content = template_secondary.render(name=\"John Doe\")\n    return f\"{main_content}\\n\\n{secondary_content}\"\n</code></pre>"},{"location":"guides/actions/use-templates/#the-templates-parameter","title":"The <code>templates</code> parameter","text":"<p>You can also request the <code>templates</code> parameter in your action to access all templates in the action's folder. This is useful if you want to use multiple templates without specifying each one individually. The <code>templates</code> parameter will be a dictionary where the keys are the template names and the values are the rendered templates.</p> <pre><code>from kamihi import bot\nfrom jinja2 import Template\n\n@bot.action\nasync def start(templates: dict[str, Template]):\n    main_content = templates[\"start.md.jinja\"].render(name=\"John Doe\")\n    secondary_content = templates[\"secondary_template.md.jinja\"].render(name=\"John Doe\")\n    return f\"{main_content}\\n\\n{secondary_content}\"\n</code></pre>"},{"location":"guides/config/configure-timezone/","title":"Configure the timezone","text":"<p>The default timezone for the bot is UTC. You can change it by adjusting the <code>settings.timezone</code> variable:</p> <code>kamihi.yml</code><code>.env</code>Programmatically <pre><code>timezone: America/New_York\n</code></pre> <pre><code>KAMIHI_TIMEZONE=America/New_York\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.timezone = \"America/New_York\"\n</code></pre> <p>You can get the list of available timezones from here.</p>"},{"location":"guides/config/load-environment/","title":"Load configuration from environment variables","text":"<p>This guide explains how to load configuration settings for your Kamihi application from environment variables. Using environment variables allows you to configure your application in different environments without modifying your code or configuration files.</p>"},{"location":"guides/config/load-environment/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi project.</li> <li>A basic understanding of Kamihi's configuration system.</li> </ul>"},{"location":"guides/config/load-environment/#configuration-basics","title":"Configuration basics","text":"<p>Kamihi automatically loads configuration settings from environment variables.  Environment variables must be prefixed with <code>KAMIHI_</code> to be recognized by the Kamihi configuration system. Nested settings are defined using double underscores <code>__</code>. For example, the <code>stdout_level</code> attribute within the <code>log</code> section would be represented by the environment variable <code>KAMIHI_LOG__STDOUT_LEVEL</code>.</p> <p>The environment variables correspond to the attributes defined in the <code>KamihiSettings</code> class.</p>"},{"location":"guides/config/load-environment/#steps","title":"Steps","text":"<ol> <li> <p>Define environment variables:</p> <p>Set the desired environment variables in your shell or in a <code>.env</code> file. For example:</p> Environment variables<code>.env</code> file <pre><code>export KAMIHI_LOG__STDOUT_LEVEL=DEBUG\nexport KAMIHI_LOG__FILE_ENABLE=true\nexport KAMIHI_LOG__FILE_PATH=\"app.log\"\n</code></pre> <pre><code>KAMIHI_LOG__STDOUT_LEVEL=DEBUG\nKAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"app.log\"\n</code></pre> </li> <li> <p>Load the settings:</p> <p>The Kamihi framework will automatically load the configuration from the environment variables. You can then access these settings through <code>bot.settings</code>.</p> <pre><code>from kamihi import bot\n\nprint(bot.settings.log.stdout_level)  # Output: DEBUG\n</code></pre> </li> </ol>"},{"location":"guides/config/load-environment/#notes","title":"Notes","text":"<ul> <li>Environment variables will override the default values defined in the <code>KamihiSettings</code> class.</li> <li>Environment variables take precedence over settings in a configuration file.</li> <li>Changes to environment variables require a restart of the Kamihi application to take effect.</li> </ul>"},{"location":"guides/config/load-file/","title":"Load configuration from a file","text":"<p>This guide explains how to load configuration settings for your Kamihi application from a file. Using a configuration file allows you to easily manage and modify settings without altering your code.</p>"},{"location":"guides/config/load-file/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi project.</li> <li>A basic understanding of Kamihi's configuration system.</li> </ul>"},{"location":"guides/config/load-file/#configuration-basics","title":"Configuration basics","text":"<p>Kamihi supports loading configuration from YAML files. By default, it looks for a file named <code>kamihi.yaml</code> in the same directory as your application. You can also specify a custom file path using the <code>KAMIHI_CONFIG_FILE</code> environment variable.</p> <p>The configuration file should contain settings that correspond to the attributes defined in your <code>KamihiSettings</code> class.</p>"},{"location":"guides/config/load-file/#steps","title":"Steps","text":"<ol> <li> <p>Create a configuration file:</p> <p>Create a file named <code>kamihi.yaml</code> (or choose a different name) in your project directory. Add your desired configuration settings to this file. For example:</p> <pre><code>log:\n  stdout_level: DEBUG\n  file_enable: true\n  file_path: \"app.log\"\n</code></pre> </li> <li> <p>Specify the configuration file (optional):</p> <p>If you are not using the default <code>kamihi.yaml</code> file, set the <code>KAMIHI_CONFIG_FILE</code> environment variable to the path of your configuration file. This can be done in your shell or in a <code>.env</code> file:</p> Environment variable<code>.env</code> file <pre><code>export KAMIHI_CONFIG_FILE=/path/to/your/config.yaml\n</code></pre> <pre><code>KAMIHI_CONFIG_FILE=/path/to/your/config.yaml\n</code></pre> </li> <li> <p>Load the settings:</p> <p>When your Kamihi application starts, it will automatically load the configuration from the specified file (or the default <code>kamihi.yaml</code> if no environment variable is set).  You can then access these settings through <code>bot.settings</code>.</p> <pre><code>from kamihi import bot\n\nprint(bot.settings.log.stdout_level)  # Output: DEBUG\n</code></pre> </li> </ol>"},{"location":"guides/config/load-file/#notes","title":"Notes","text":"<ul> <li>Settings in the configuration file will override the default values defined in your <code>KamihiSettings</code> class.</li> <li>Environment variables (e.g., <code>KAMIHI_LOG__STDOUT_LEVEL</code>) will take precedence over settings in the configuration file.</li> <li>If the file specified by <code>KAMIHI_CONFIG_FILE</code> does not exist, Kamihi will fall back to the default <code>kamihi.yaml</code> file, or to the default settings if that file doesn't exist either.</li> </ul>"},{"location":"guides/config/load-prog/","title":"Set configuration values programmatically","text":"<p>This guide explains how to configure your Kamihi application programmatically. This method is useful when you need to dynamically generate or modify configuration settings within your code.</p>"},{"location":"guides/config/load-prog/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi project.</li> <li>A basic understanding of Kamihi's configuration system.</li> </ul>"},{"location":"guides/config/load-prog/#configuration-basics","title":"Configuration basics","text":"<p>Kamihi allows you to configure settings directly in your Python code by instantiating and modifying the <code>KamihiSettings</code> class. This approach bypasses the need for environment variables or configuration files, providing greater flexibility for dynamic configurations.</p>"},{"location":"guides/config/load-prog/#steps","title":"Steps","text":"<ol> <li>Import the bot instance: <pre><code>from kamihi import bot\n</code></pre></li> <li>Set the desired settings programmatically: You can set the desired settings directly on the <code>bot.settings</code> object. For example:     <pre><code>bot.settings.log.stdout_level = \"DEBUG\"\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"app.log\"\n</code></pre></li> </ol>"},{"location":"guides/config/load-prog/#notes","title":"Notes","text":"<ul> <li>Programmatically set settings will override default values and settings loaded from configuration files or environment variables.</li> <li>Configuration changes made programmatically will not be validated against the schema defined in the <code>KamihiSettings</code> class. Ensure that the values you set are valid according to the expected types and formats.</li> <li>This method is ideal for scenarios where configuration needs to be determined at runtime based on application logic or external factors.</li> </ul>"},{"location":"guides/logging/configure-notifications/","title":"Configure notifications","text":"<p>This guide shows you how to set up log notifications in Kamihi to receive alerts for important log events through various notification services.</p>"},{"location":"guides/logging/configure-notifications/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi application</li> <li>Access to one or more notification services (Discord, Slack, Email, Telegram, etc.)</li> <li>Basic understanding of log levels</li> </ul>"},{"location":"guides/logging/configure-notifications/#configure-notification-logging","title":"Configure notification logging","text":"<p>Add the appropriate configuration to your Kamihi application to enable notification logging:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n  # Enable notification logging\n  notification_enable: true\n\n  # Set the minimum log level that triggers notifications\n  notification_level: ERROR\n\n  # Add notification service URLs (Apprise format)\n  notification_urls:\n    - discord://webhook_id/webhook_token\n    - slack://token/channel\n    - telegram://bot_token/chat_id\n</code></pre> <pre><code># Enable notification logging\nKAMIHI_LOG__NOTIFICATION_ENABLE=true\n\n# Set the minimum log level that triggers notifications\nKAMIHI_LOG__NOTIFICATION_LEVEL=ERROR\n\n# Add notification service URLs (Apprise format)\n# For multiple URLs, use comma-separated values\nKAMIHI_LOG__NOTIFICATION_URLS=discord://webhook_id/webhook_token,slack://token/channel\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.notification_enable = True\nbot.settings.log.notification_level = \"ERROR\"\nbot.settings.log.notification_urls = [\n    \"discord://webhook_id/webhook_token\",\n    \"slack://token/channel\",\n    \"telegram://bot_token/chat_id\"\n]\n</code></pre>"},{"location":"guides/logging/configure-notifications/#setting-up-notification-services","title":"Setting up notification services","text":""},{"location":"guides/logging/configure-notifications/#telegram","title":"Telegram","text":"<p>You can use the same Telegram bot token and chat ID that you use for the main bot. To set up notifications:</p> <ol> <li>Get your bot token</li> <li>Get your chat ID (you can use the <code>getUpdates</code> method to find it)</li> <li>Use the format: <code>telegram://bot_token/chat_id</code></li> </ol>"},{"location":"guides/logging/configure-notifications/#discord","title":"Discord","text":"<p>To set up Discord notifications:</p> <ol> <li>In your Discord server, go to Server Settings &gt; Integrations &gt; Webhooks</li> <li>Click New Webhook, give it a name and select a channel</li> <li>Click Copy Webhook URL</li> <li>Use this URL in the format: <code>discord://webhook_id/webhook_token</code></li> </ol>"},{"location":"guides/logging/configure-notifications/#slack","title":"Slack","text":"<p>To set up Slack notifications:</p> <ol> <li>Create a Slack app at https://api.slack.com/apps</li> <li>Enable Incoming Webhooks for your app</li> <li>Add a new webhook to your workspace</li> <li>Copy the webhook URL</li> <li>Use this URL in the format: <code>slack://token/channel</code></li> </ol>"},{"location":"guides/logging/configure-notifications/#email","title":"Email","text":"<p>To set up email notifications:</p> <ol> <li>Use the format: <code>mailto://user:password@gmail.com</code></li> <li>For Gmail, you may need to create an app password</li> </ol>"},{"location":"guides/logging/configure-notifications/#other-services","title":"Other services","text":"<p>Please refer to the Apprise documentation for more information on how to set up other supported notification services.</p>"},{"location":"guides/logging/configure-notifications/#testing-your-notifications","title":"Testing your notifications","text":"<p>You can use a simple script to test that your notifications are working:</p> <pre><code>from loguru import logger\n\n# This will send a notification if you've set notification_level to ERROR or lower\nlogger.error(\"Test notification - this is an error message\")\n\n# This will send a notification if you've set notification_level to CRITICAL\nlogger.critical(\"Test notification - this is a critical message\")\n</code></pre>"},{"location":"guides/logging/configure-rotation-retention/","title":"Configure file log rotation and retention","text":"<p>This guide shows you how to set up file logging with rotation and retention policies in Kamihi, preventing log files from growing too large and managing disk space efficiently.</p>"},{"location":"guides/logging/configure-rotation-retention/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi project</li> <li>Basic understanding of Kamihi's configuration system</li> </ul>"},{"location":"guides/logging/configure-rotation-retention/#configuration-basics","title":"Configuration basics","text":"<p>Kamihi uses the following configuration options for log rotation and retention:</p> <ul> <li><code>log.file_enable</code> (<code>KAMIHI_LOG__FILE_ENABLE</code>): Enable file logging</li> <li><code>log.file_path</code> (<code>KAMIHI_LOG__FILE_PATH</code>): Path to the log file</li> <li><code>log.file_rotation</code> (<code>KAMIHI_LOG__FILE_ROTATION</code>): Rotation policy</li> <li><code>log.file_retention</code> (<code>KAMIHI_LOG__FILE_RETENTION</code>): Retention policy</li> </ul> <p>To understand how to set configuration options, refer to the configuration guide.</p>"},{"location":"guides/logging/configure-rotation-retention/#common-logging-scenarios","title":"Common logging scenarios","text":""},{"location":"guides/logging/configure-rotation-retention/#high-volume-production-applications","title":"High-volume production applications","text":"<p>If your application produces high-volume logs (e.g., many requests per second), the following settings are recommended</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\nfile_enable: true\nfile_path: \"/var/log/kamihi/app.log\"\nfile_rotation: \"100 MB\" # Rotate when the file reaches 100 MB\nfile_retention: \"10 days\" # Keep logs for 10 days\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"/var/log/kamihi/app.log\"\nKAMIHI_LOG__FILE_ROTATION=\"100 MB\" # Rotate when the file reaches 100 MB\nKAMIHI_LOG__FILE_RETENTION=\"10 days\" # Keep logs for 10 days\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"/var/log/kamihi/app.log\"\nbot.settings.log.file_rotation = \"100 MB\"  # Rotate when the file reaches 100 MB\nbot.settings.log.file_retention = \"10 days\"  # Keep logs for 10 days\n</code></pre> <p>Alternatively, for containers or environments with limited disk space, you can use a more conservative approach:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\nfile_enable: true\nfile_path: \"/var/log/kamihi/app.log\"\nfile_rotation: \"50 MB\" # Rotate when the file reaches 50 MB\nfile_retention: \"3 days\" # Keep logs for 3 days\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"/var/log/kamihi/app.log\"\nKAMIHI_LOG__FILE_ROTATION=\"50 MB\" # Rotate when the file reaches 50 MB\nKAMIHI_LOG__FILE_RETENTION=\"3 days\" # Keep logs for 3 days\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"/var/log/kamihi/app.log\"\nbot.settings.log.file_rotation = \"50 MB\"  # Rotate when the file reaches 50 MB\nbot.settings.log.file_retention = \"3 days\"  # Keep logs for 3 days\n</code></pre>"},{"location":"guides/logging/configure-rotation-retention/#background-or-batch-processing-applications","title":"Background or batch processing applications","text":"<p>If your application runs scheduled jobs or processes data in batches, you can configure daily rotation to match your job schedule:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\nfile_enable: true\nfile_path: \"/var/log/kamihi/app.log\"\nfile_rotation: \"1 day\" # Rotate daily\nfile_retention: \"7 days\" # Keep logs for 7 days\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"/var/log/kamihi/app.log\"\nKAMIHI_LOG__FILE_ROTATION=\"1 day\" # Rotate daily\nKAMIHI_LOG__FILE_RETENTION=\"7 days\" # Keep logs for 7 days\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"/var/log/kamihi/app.log\"\nbot.settings.log.file_rotation = \"1 day\"  # Rotate daily\nbot.settings.log.file_retention = \"7 days\"  # Keep logs for 7 days\n</code></pre>"},{"location":"guides/logging/configure-rotation-retention/#development-environments","title":"Development environments","text":"<p>For local development, we do not recommend using file logging, as it can clutter your workspace. However, if you want to keep logs for debugging purposes, you can set a short retention period:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\nfile_enable: true\nfile_path: \"app.log\"\nfile_rotation: \"1 hour\" # Rotate every hour\nfile_retention: \"1 day\" # Keep logs for 1 day\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=\"app.log\"\nKAMIHI_LOG__FILE_ROTATION=\"1 hour\" # Rotate every hour\nKAMIHI_LOG__FILE_RETENTION=\"1 day\" # Keep logs for 1 day\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"app.log\"\nbot.settings.log.file_rotation = \"1 hour\"  # Rotate every hour\nbot.settings.log.file_retention = \"1 day\"  # Keep logs for 1 day\n</code></pre>"},{"location":"guides/logging/configure-rotation-retention/#advanced-usage","title":"Advanced usage","text":"<p>Please refer to the <code>loguru</code> documentation for more advanced usage, including custom rotation and retention policies.</p>"},{"location":"guides/logging/configure-structured/","title":"Configure structured logging","text":"<p>Structured logging transforms your application logs into machine-readable JSON format instead of plain text. You should enable structured logging when:</p> <ul> <li>You need to process logs programmatically</li> <li>You're integrating with modern log management systems</li> <li>You want to enable advanced filtering and searching capabilities</li> <li>You need to track complex relationships between log events</li> </ul> <p>Structured logs make it easier to analyze patterns, troubleshoot issues, and extract metrics from your application's operation.</p>"},{"location":"guides/logging/configure-structured/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi application</li> <li>Basic understanding of Kamihi configuration</li> </ul>"},{"location":"guides/logging/configure-structured/#enable-structured-logging","title":"Enable structured logging","text":"<p>Add the appropriate configuration to your Kamihi application to enable structured logging:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n  # Enable structured logging for stdout\n  stdout_serialize: true\n\n  # Enable structured logging for stderr\n  stderr_enable: true\n  stderr_serialize: true\n\n  # Enable structured logging for file output\n  file_enable: true\n  file_path: kamihi.json\n  file_serialize: true\n</code></pre> <pre><code># Enable structured logging for stdout\nKAMIHI_LOG__STDOUT_SERIALIZE=true\n\n# Enable structured logging for stderr\nKAMIHI_LOG__STDERR_ENABLE=true\nKAMIHI_LOG__STDERR_SERIALIZE=true\n\n# Enable structured logging for file output\nKAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=kamihi.json\nKAMIHI_LOG__FILE_SERIALIZE=true\n</code></pre> <pre><code>from kamihi import bot\n\nbot.settings.log.stdout_serialize = True\n\nbot.settings.log.stderr_enable = True\nbot.settings.log.stderr_serialize = True\n\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"kamihi.json\"\nbot.settings.log.file_serialize = True\n</code></pre>"},{"location":"guides/logging/configure-structured/#checking-your-structured-logs","title":"Checking your structured logs","text":"<p>When structured logging is enabled, your logs will be output as JSON objects. Each log entry will be a single line containing a JSON object that includes details like timestamp, log level, message text, and contextual information.</p>"},{"location":"guides/logging/configure-structured/#related-documentation","title":"Related documentation","text":"<p>Refer to the Loguru documentation for more details on structured logging capabilities and how to add contextual information to your logs.</p>"},{"location":"guides/logging/setup-basic/","title":"Set up basic logging","text":"<p>This guide shows you how to configure and use basic logging in your Kamihi application.</p> <p>If you need to capture application activity for debugging or monitoring, configure logging as described below.</p>"},{"location":"guides/logging/setup-basic/#configuring-console-logging","title":"Configuring console logging","text":"<p>Console logging to <code>stdout</code> is enabled by default. You can configure it in several ways:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n    stdout_level: DEBUG # default is INFO\n</code></pre> <pre><code>KAMIHI_LOG__STDOUT_LEVEL=DEBUG # default is INFO\n</code></pre> <pre><code>from kamihi import bot\n\n# Set the logging level for stdout\nbot.settings.log.stdout_level = \"DEBUG\"  # default is INFO\n</code></pre>"},{"location":"guides/logging/setup-basic/#configuring-stderr-logging","title":"Configuring <code>stderr</code> logging","text":"<p>If you want to log to <code>stderr</code>, you can enable and configure it similarly:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n    stderr_enable: true\n    stderr_level: ERROR\n</code></pre> <pre><code>KAMIHI_LOG__STDERR_ENABLE=true\nKAMIHI_LOG__STDERR_LEVEL=ERROR\n</code></pre> <pre><code>from kamihi import bot\n\n# Enable and set the logging level for stderr\nbot.settings.log.stderr_enable = True\nbot.settings.log.stderr_level = \"ERROR\"\n</code></pre>"},{"location":"guides/logging/setup-basic/#adding-file-logging","title":"Adding file logging","text":"<p>If you need to store logs in a file:</p> Config. file<code>.env</code> fileProgrammatically <pre><code>log:\n    file_enable: true\n    file_path: app.log # Path to the log file, default is \"kamihi.log\"\n    file_level: DEBUG\n</code></pre> <pre><code>KAMIHI_LOG__FILE_ENABLE=true\nKAMIHI_LOG__FILE_PATH=app.log # Path to the log file, default is \"kamihi.log\"\nKAMIHI_LOG__FILE_LEVEL=DEBUG\n</code></pre> <pre><code>from kamihi import bot\n\n# Enable file logging and set the log file path and level\nbot.settings.log.file_enable = True\nbot.settings.log.file_path = \"app.log\"  # Path to the log file, default is \"kamihi.log\"\nbot.settings.log.file_level = \"DEBUG\"\n</code></pre>"},{"location":"guides/projects/other-package-managers/","title":"Using other package managers","text":"<p>This guide explains how to install and set up Kamihi projects using package managers other than <code>uv</code>. While Kamihi's templates and documentation default to <code>uv</code>, you can successfully use <code>pip</code> with virtual environments or <code>Poetry</code> for dependency management.</p>"},{"location":"guides/projects/other-package-managers/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or higher installed on your system</li> <li>Basic familiarity with Python package management</li> <li>For Poetry: Poetry installed on your system (installation guide)</li> </ul>"},{"location":"guides/projects/other-package-managers/#why-use-alternative-package-managers","title":"Why use alternative package managers","text":"<p>While <code>uv</code> offers exceptional performance and modern features, you might prefer other package managers for various reasons:</p> <ul> <li>Team consistency: Your team already uses <code>pip</code> or Poetry</li> <li>Tooling integration: Existing CI/CD pipelines or IDE configurations</li> <li>Familiarity: Comfort with established workflows</li> <li>Corporate policies: Organization requirements for specific tools</li> </ul>"},{"location":"guides/projects/other-package-managers/#installation-approaches","title":"Installation approaches","text":""},{"location":"guides/projects/other-package-managers/#using-pip-with-virtual-environments","title":"Using pip with virtual environments","text":"<p>This approach uses Python's built-in <code>venv</code> module with <code>pip</code> for dependency management.</p>"},{"location":"guides/projects/other-package-managers/#creating-a-new-project","title":"Creating a new project","text":"<ol> <li> <p>Create and navigate to your project directory:</p> <pre><code>mkdir hello-world\ncd hello-world\n</code></pre> </li> <li> <p>Create a virtual environment:</p> <pre><code>python -m venv .venv\n</code></pre> </li> <li> <p>Activate the virtual environment:</p> Linux/macOSWindows (Command Prompt)Windows (PowerShell) <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>.venv\\Scripts\\activate.bat\n</code></pre> <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre> </li> <li> <p>Install Kamihi:</p> <pre><code>pip install kamihi\n</code></pre> </li> <li> <p>Create project structure manually:</p> <p>Since <code>kamihi init</code> creates a <code>uv</code>-based project, you'll need to adapt the structure:</p> <pre><code># Create necessary directories\nmkdir actions models\nmkdir actions/start\n\n# Create __init__.py files\ntouch actions/__init__.py\ntouch actions/start/__init__.py\ntouch models/__init__.py\n</code></pre> </li> <li> <p>Create essential files:</p> <p>Create a <code>requirements.txt</code> file for dependency management:</p> <pre><code>kamihi&gt;=1.0.0\n</code></pre> <p>Create a basic <code>kamihi.yml</code> configuration file:</p> <pre><code>---\ntoken: YOUR_TOKEN_HERE\ntimezone: UTC\n</code></pre> <p>Create a sample action in <code>actions/start/start.py</code>:</p> <pre><code>from kamihi import bot\nfrom telegram import Update\nfrom telegram.ext import ContextTypes\n\n@bot.action(description=\"Start the bot\")\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -&gt; None:\n    \"\"\"Handle the /start command.\"\"\"\n    await update.message.reply_text(\"Hello! I'm your Kamihi bot.\")\n</code></pre> </li> </ol>"},{"location":"guides/projects/other-package-managers/#running-your-project","title":"Running your project","text":"<ol> <li> <p>Ensure your virtual environment is activated:</p> <p>The command prompt should show <code>(.venv)</code> prefix when activated.</p> </li> <li> <p>Run the bot:</p> <pre><code>kamihi run\n</code></pre> </li> </ol>"},{"location":"guides/projects/other-package-managers/#managing-dependencies","title":"Managing dependencies","text":"<p>To add new dependencies to your project:</p> <pre><code># Install a new package\npip install package-name\n\n# Update requirements.txt\npip freeze &gt; requirements.txt\n</code></pre> <p>To install dependencies on a new machine:</p> <pre><code># Activate virtual environment first\nsource .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate.bat  # Windows\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"guides/projects/other-package-managers/#using-poetry","title":"Using Poetry","text":"<p>Poetry provides a more modern approach to Python dependency management with automatic virtual environment handling.</p>"},{"location":"guides/projects/other-package-managers/#creating-a-new-project_1","title":"Creating a new project","text":"<ol> <li> <p>Initialize a new Poetry project:</p> <pre><code>poetry new hello-world\ncd hello-world\n</code></pre> </li> <li> <p>Add Kamihi as a dependency:</p> <pre><code>poetry add kamihi\n</code></pre> </li> <li> <p>Create project structure:</p> <p>Poetry creates a different directory structure by default. Adapt it for Kamihi:</p> <pre><code># Remove the default package directory if it exists\nrm -rf hello_world/\n\n# Create Kamihi-expected directories\nmkdir actions models\nmkdir actions/start\n\n# Create __init__.py files\ntouch actions/__init__.py\ntouch actions/start/__init__.py\ntouch models/__init__.py\n</code></pre> </li> <li> <p>Create essential files:</p> <p>Create a <code>kamihi.yml</code> configuration file:</p> <pre><code>---\ntoken: YOUR_TOKEN_HERE\ntimezone: UTC\n</code></pre> <p>Create a sample action in <code>actions/start/start.py</code>:</p> <pre><code>from kamihi import bot\nfrom telegram import Update\nfrom telegram.ext import ContextTypes\n\n@bot.action(description=\"Start the bot\")\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -&gt; None:\n    \"\"\"Handle the /start command.\"\"\"\n    await update.message.reply_text(\"Hello! I'm your Kamihi bot.\")\n</code></pre> </li> </ol>"},{"location":"guides/projects/other-package-managers/#running-your-project_1","title":"Running your project","text":"<ol> <li> <p>Run the bot using Poetry:</p> <pre><code>poetry run kamihi run\n</code></pre> <p>Alternatively, you can activate Poetry's virtual environment:</p> <pre><code>poetry shell\nkamihi run\n</code></pre> </li> </ol>"},{"location":"guides/projects/other-package-managers/#managing-dependencies_1","title":"Managing dependencies","text":"<p>Poetry simplifies dependency management:</p> <pre><code># Add a new dependency\npoetry add package-name\n\n# Add a development dependency\npoetry add --group dev package-name\n\n# Update dependencies\npoetry update\n\n# Install dependencies (useful for new machines)\npoetry install\n</code></pre>"},{"location":"guides/projects/other-package-managers/#converting-existing-uv-projects","title":"Converting existing uv projects","text":"<p>If you have an existing Kamihi project created with <code>uv</code> that you want to convert:</p>"},{"location":"guides/projects/other-package-managers/#converting-to-pip-venv","title":"Converting to pip + venv","text":"<ol> <li> <p>Create and activate a virtual environment:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate.bat  # Windows\n</code></pre> </li> <li> <p>Convert dependencies:</p> <p>Extract dependencies from <code>pyproject.toml</code> and create <code>requirements.txt</code>:</p> <pre><code># If uv is still available\nuv pip compile pyproject.toml -o requirements.txt\n\n# Or manually create requirements.txt based on pyproject.toml dependencies\n</code></pre> </li> <li> <p>Install dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> <li> <p>Remove uv-specific files (optional):</p> <pre><code>rm uv.lock  # If you no longer need uv\n</code></pre> </li> </ol>"},{"location":"guides/projects/other-package-managers/#converting-to-poetry","title":"Converting to Poetry","text":"<ol> <li> <p>Initialize Poetry in the existing directory:</p> <pre><code>poetry init\n</code></pre> </li> <li> <p>Add dependencies from pyproject.toml:</p> <p>Poetry can read the existing <code>pyproject.toml</code> if it follows standard format:</p> <pre><code>poetry install\n</code></pre> <p>Or manually add each dependency:</p> <pre><code>poetry add kamihi\n# Add other dependencies as needed\n</code></pre> </li> <li> <p>Remove uv-specific files (optional):</p> <pre><code>rm uv.lock  # If you no longer need uv\n</code></pre> </li> </ol>"},{"location":"guides/projects/other-package-managers/#important-considerations","title":"Important considerations","text":""},{"location":"guides/projects/other-package-managers/#virtual-environment-activation","title":"Virtual environment activation","text":"<p>Unlike <code>uv</code>, which can automatically manage Python environments, <code>pip</code> requires manual virtual environment activation. Always ensure your virtual environment is activated before running commands.</p>"},{"location":"guides/projects/other-package-managers/#dependency-resolution","title":"Dependency resolution","text":"<ul> <li>uv: Provides fast, deterministic dependency resolution</li> <li>pip: May require manual conflict resolution for complex dependencies</li> <li>Poetry: Provides deterministic resolution similar to uv but may be slower</li> </ul>"},{"location":"guides/projects/other-package-managers/#performance-differences","title":"Performance differences","text":"<p><code>uv</code> typically offers significantly faster installation and resolution times compared to <code>pip</code> and Poetry. If performance is critical, consider using <code>uv</code> even if your team prefers other tools for some workflows.</p>"},{"location":"guides/projects/other-package-managers/#docker-deployment","title":"Docker deployment","text":"<p>When deploying with Docker, you may need to adapt the Dockerfile provided by Kamihi templates. The default Dockerfile uses <code>uv</code> for multi-stage builds and optimized performance.</p>"},{"location":"guides/projects/other-package-managers/#notes","title":"Notes","text":"<ul> <li>Kamihi's core functionality remains the same regardless of the package manager used</li> <li>The <code>kamihi</code> CLI commands work identically across all package managers</li> <li>Consider your team's existing toolchain and workflows when choosing a package manager</li> <li>All package managers can coexist in the same environment if needed for different projects</li> </ul>"},{"location":"guides/users/extend/","title":"Extend the user model","text":"<p>This guide shows how to extend and customize the user model of the framework. You can do this if you need to store more data about your users than just their Telegram ID and their admin status.</p>"},{"location":"guides/users/extend/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kamihi application</li> <li>Basic understanding of how MongoDB works</li> </ul>"},{"location":"guides/users/extend/#extending-the-user-class","title":"Extending the User class","text":"<p>You can import the base user class into your code and create a subclass extending it. For the framework to actually use this model, you also have to decorate it with <code>@bot.user_class</code> and place it in the <code>models/</code> folder. Thus:</p> <pre><code># models/user.py\nfrom kamihi import bot, BaseUser\nfrom mongoengine import StringField\n\n\n@bot.user_class\nclass User(BaseUser):\n    name: str = StringField(required=True)\n</code></pre> <p>The user model (and every other model in the framework) is defined using MongoEngine, and you can add any of the fields supported by it.</p>"},{"location":"guides/users/extend/#adding-users-with-extended-attributes-using-the-cli","title":"Adding users with extended attributes using the CLI","text":"<p>To add users with an extended <code>User</code> class, all the extra attributes need to be sent as a JSON string with the <code>--data</code> option:</p> <pre><code>&gt; kamihi user add 123456789 --data '{\"name\": \"John Doe\"}'\n</code></pre>"},{"location":"reference/cli/","title":"CLI reference","text":""},{"location":"reference/cli/#kamihi","title":"kamihi","text":"<p>Kamihi CLI utility. This utility provides commands to manage and interact with the Kamihi framework.</p>"},{"location":"reference/cli/#usage","title":"Usage","text":"<p><code>kamihi [OPTIONS] COMMAND [ARGS]...</code></p>"},{"location":"reference/cli/#arguments","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"reference/cli/#options","title":"Options","text":"Name Description Required Default <code>--config FILE</code> Path to the Kamihi configuration file  [default: (kamihi.yaml)] No - <code>--help</code> Show this message and exit. No - <code>version</code> Print the version and exit. No - <code>init</code> Initialize a new Kamihi project. No - <code>run</code> Run a project with the Kamihi framework. No -"},{"location":"reference/cli/#sub-commands","title":"Sub Commands","text":""},{"location":"reference/cli/#kamihi-version","title":"<code>kamihi version</code>","text":"<p>Print the version and exit.</p>"},{"location":"reference/cli/#usage_1","title":"Usage","text":"<p><code>kamihi version [OPTIONS]</code></p>"},{"location":"reference/cli/#arguments_1","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"reference/cli/#options_1","title":"Options","text":"Name Description Required Default <code>--help</code> Show this message and exit. No -"},{"location":"reference/cli/#kamihi-init","title":"<code>kamihi init</code>","text":"<p>Initialize a new Kamihi project.</p>"},{"location":"reference/cli/#usage_2","title":"Usage","text":"<p><code>kamihi init [OPTIONS] NAME</code></p>"},{"location":"reference/cli/#arguments_2","title":"Arguments","text":"Name Description Required <code>NAME</code> Name of the project. Yes"},{"location":"reference/cli/#options_2","title":"Options","text":"Name Description Required Default <code>--path DIRECTORY</code> Path to the project directory. No - <code>--description TEXT</code> Description of the project.  [default: Kamihi project] No - <code>--help</code> Show this message and exit. No -"},{"location":"reference/cli/#kamihi-action","title":"<code>kamihi action</code>","text":"<p>No description available</p>"},{"location":"reference/cli/#usage_3","title":"Usage","text":"<p><code>kamihi action new [OPTIONS] NAME</code></p>"},{"location":"reference/cli/#arguments_3","title":"Arguments","text":"Name Description Required <code>NAME</code> Name of the new action. Yes"},{"location":"reference/cli/#options_3","title":"Options","text":"Name Description Required Default <code>--help</code> Show this message and exit. No - <code>new</code> Create a new action. No - <code>--description TEXT</code> Description of the new action. No - <code>--help</code> Show this message and exit. No -"},{"location":"reference/cli/#kamihi-run","title":"<code>kamihi run</code>","text":"<p>Run a project with the Kamihi framework.</p>"},{"location":"reference/cli/#usage_4","title":"Usage","text":"<p><code>kamihi run [OPTIONS]</code></p>"},{"location":"reference/cli/#arguments_4","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"reference/cli/#options_4","title":"Options","text":"Name Description Required Default <code>-l, --log-level [TRACE|DEBUG|INFO|SUCCESS|WARNING|ERROR|CRITICAL]</code> Set the logging level for console loggers.  [default: (INFO)] No - <code>-h, --host TEXT</code> Host of the admin web panel  [default: (localhost)] No - <code>-p, --port INTEGER RANGE</code> Port of the admin web panel  [default: (4242); 1024&lt;=x&lt;=65535] No - <code>--help</code> Show this message and exit. No -"},{"location":"reference/cli/#kamihi-user","title":"<code>kamihi user</code>","text":"<p>No description available</p>"},{"location":"reference/cli/#usage_5","title":"Usage","text":"<p><code>kamihi user add [OPTIONS] TELEGRAM_ID</code></p>"},{"location":"reference/cli/#arguments_5","title":"Arguments","text":"Name Description Required <code>TELEGRAM_ID</code> Telegram ID of the user Yes"},{"location":"reference/cli/#options_5","title":"Options","text":"Name Description Required Default <code>--help</code> Show this message and exit. No - <code>add</code> Add a new user. No - <code>-a, --admin</code> Is the user an admin? No - <code>-d, --data TEXT</code> Additional data for the user in JSON format. For use with custom user classes. No - <code>--help</code> Show this message and exit. No -"},{"location":"tutorials/","title":"Index","text":"<p>In this section, you can find some tutorials to learn the basics of Kamihi.</p> <p>Unsure where to start? \"Your first bot\" might just be the place.</p>"},{"location":"tutorials/adding-actions/","title":"Adding actions","text":"<p>In the previous tutorial, we got our first bot up and running, but at the moment it doesn't do much.</p> <p>We can easily add functionality to our bot by adding new actions.</p>"},{"location":"tutorials/adding-actions/#what-are-actions","title":"What are actions?","text":"<p>Actions are the basic units that compose a bot. Each action defines a functionality, and is normally associated with one command (like <code>/start</code>, always prefixed with a slash). By adding actions to our bot, we can make it do anything we may want.</p>"},{"location":"tutorials/adding-actions/#the-default-action","title":"The default action","text":"<p>Your basic bot already comes with an action, and the good news is that you have already used it! By sending the command <code>/start</code> to the bot, you executed the action <code>start</code>, that lives in the folder <code>actions/start</code>. Pretty straightforward, right?</p> <p>If you open the file <code>actions/start/start.py</code>, you will find the following content:</p> <pre><code>\"\"\"\nStart action for hello-world.\n\"\"\"\n\nfrom kamihi import bot # (1)!\n\n\n@bot.action # (2)!\nasync def start() -&gt; str: # (3)!\n    \"\"\"\n    Start action for the bot.\n\n    This function is called when the bot starts.\n    \"\"\"\n    return f\"Hello, I'm your friendly bot. How can I help you today?\" # (4)!\n</code></pre> <ol> <li>To interact with Kamihi, we import the <code>bot</code> object. There is no need to initialize any class, the framework takes care of that.</li> <li>We register an action by decorating any <code>async</code> function with <code>@bot.action</code>.</li> <li>Although not strictly needed for basic cases, Kamihi works better when the code is typed.</li> <li>The result returned from the decorated function will be sent to the user.</li> </ol>"},{"location":"tutorials/adding-actions/#creating-a-new-action","title":"Creating a new action","text":"<p>The default action is OK, but really basic. It's all right, though, because we can easily add new actions with a simple command:</p> kamihi action new timeCopying from template version x.x.x identical  actions    create  actions/time    create  actions/time/time.py    create  actions/time/__init__.py <p>This command creates a new <code>actions/time</code> folder with all the files you need to get this action up and running.</p>"},{"location":"tutorials/adding-actions/#making-the-action-interesting","title":"Making the action interesting","text":"<p>If you start the bot right now, and send the command <code>/time</code>, it will answer with a simple \"Hello, world!\". I think we can do better. Since the command is <code>/time</code>, we can make our bot return the time. For that, edit the file <code>actions/time/time.py</code> with the following content:</p> <pre><code>\"\"\"\ntime action.\n\"\"\"\n\n\nfrom datetime import datetime # (1)!\n\nfrom kamihi import bot\n\n\n@bot.action\nasync def time() -&gt; str:\n    \"\"\"\n    time action.\n\n    Returns:#\n        str: The result of the action.\n\n    \"\"\"\n    # Your action logic here\n    return (datetime\n            .now(bot.settings.timezone_obj) # (2)!\n            .strftime(\"It's %H:%M:%S on %A, %B %d, %Y\") # (3)!\n            )\n</code></pre> <ol> <li><code>datetime</code> is the Python standard library time utility.</li> <li>We can access all the settings of the bot with the <code>bot.settings</code> attribute. The <code>timezone_obj</code> property gives us a timezone object from the string we set in <code>kamihi.yml</code>.</li> <li>To get a nice message, we use this expression to format the date and time.</li> </ol>"},{"location":"tutorials/adding-actions/#using-our-new-command","title":"Using our new command","text":"<p>We can restart the bot and our new action will automatically get picked up, its command registered in the bot's menu in Telegram.</p> <p></p> <p>And we can use it in the same way as the other one, by sending <code>/time</code> to our bot.</p>"},{"location":"tutorials/adding-actions/#configuring-the-timezone","title":"Configuring the timezone","text":"<p>If you live around the Greenwich Meridian, you are all set! Continue to the next section. </p> <p>If not, the bot will have told you the wrong time. That is OK, the bot thinks itself in England, but we can easily change that. Refer to this guide for information on how to do so, and then come back.</p>"},{"location":"tutorials/adding-actions/#recap","title":"Recap","text":"<p>We have learned how to create new actions for the bot by using the <code>kamihi action new &lt;name&gt;</code> command. We have also learned how to access the bot's settings.</p> <p>In the actions you create, you can return any Markdown content. You can also integrate it with any other library, as seen with the <code>time</code> action, so go wild!</p>"},{"location":"tutorials/adding-actions/#whats-next","title":"What's next?","text":"<p>Now that you have a basic bot up and running, and you know how to add actions to it, you can customize it to your heart's content. We have just scratched the surface of what you can do with Kamihi. Check out all the guides for more in-depth information on how to use Kamihi to the fullest.</p>"},{"location":"tutorials/your-first-bot/","title":"Your first bot","text":""},{"location":"tutorials/your-first-bot/#prerequisites","title":"Prerequisites","text":"<p>To start using Kamihi, you will need three things installed on your machine:</p> <ul> <li> <p><code>git</code>: a version control manager. You can find installation instructions here, although if you are using Linux, you probably have it. To check your installation, you can use the following command on your terminal of choice:</p> <p>git -vgit version 2.49.0</p> <p>The version does not matter, any is fine as long as it shows.</p> </li> <li> <p><code>uv</code>: a Python package manager. For instructions on installing, you can follow this guide. To verify you have correctly installed it, run this command (any version is fine too):</p> <p>uv --versionuv 0.7.6</p> <p>If you do not want to use <code>uv</code>, refer to the guide for other package managers.</p> </li> <li> <p><code>docker</code> and (optionally) <code>docker compose</code>: to deploy the database for Kamihi. Te easiest way to install it is through Docker Desktop, especially if you are on Windows. Otherwise, you can install the Docker Engine and Docker Compose directly. Any version is fine, as long as you call Docker Compose with <code>docker compose</code> (as opposed to <code>docker-compose</code>). Test your installation by running:</p> <p>docker --versionDocker version 27.5.1, build 3.fc42docker compose versionDocker Compose version v2.24.2</p> </li> </ul>"},{"location":"tutorials/your-first-bot/#creating-your-project","title":"Creating your project","text":"<p>To create a new bot using Kamihi, run the following command:</p> uvx kamihi init hello-worldCopying from template version x.x.x    create  pyproject.toml    ...     <p>This will create a folder named <code>hello-world</code> in your current directory and create all the necessary files. You fill find the following files:</p> <pre><code>hello-world/\n\u251c\u2500\u2500 actions # (1)!\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 start # (2)!\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 \\_\\_init\\_\\_.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 start.py\n\u251c\u2500\u2500 docker-compose.dev.yml\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 kamihi.yml # (3)!\n\u251c\u2500\u2500 models # (4)!\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user.py\n\u251c\u2500\u2500 pyproject.toml # (5)!\n\u251c\u2500\u2500 .python-version\n\u2514\u2500\u2500 README.md\n</code></pre> <ol> <li>The actions folder. This is where you'll spend most of your time. It holds all the things you can do with the bot.</li> <li>A sample action, free of charge ;)</li> <li>The configuration file for Kamihi</li> <li>The directory for database models, where you can customize the default ones and add more.</li> <li>The Python project file.</li> </ol> <p>Don't worry if you are not sure what all files do. The base project is designed to work out of the box.</p> <p>Get into the project and install all dependencies by running these two commands:</p> cd hello-worlduv syncUsing CPython 3.12.10Creating virtual environment at: .venvResolved 46 packagesPrepared 2 packagesDone!"},{"location":"tutorials/your-first-bot/#getting-your-token","title":"Getting your token","text":"<p>Before we start doing things with our bot, we need a token. This token is a unique identifier for a bot and is used to authenticate it with the Telegram API. You can get a token by talking to @BotFather on Telegram. Just send him the <code>/newbot</code> command and follow the instructions. He'll give you a token that looks something like this:</p> <pre><code>123456789:ABC-DEF1234ghIkl-zyx57W2P0s\n</code></pre> <p>We can input our token in the configuration file we saw before (<code>kamihi.yml</code>) so that Kamihi can use it. Go ahead and open that file, and paste it in place of <code>YOUR_TOKEN_HERE</code>. Leave the rest alone, we'll come back to it later.</p> <pre><code>---\n\ntoken: YOUR_TOKEN_HERE # (1)!\ntimezone: UTC # Timezone for the bot\n</code></pre> <ol> <li>Right here, substituting <code>YOUR_TOKEN_HERE</code></li> </ol>"},{"location":"tutorials/your-first-bot/#starting-the-database","title":"Starting the database","text":"<p>Kamihi runs on top of MongoDB, so before we start doing things with our bot, we need to start it.</p> <p>There are many ways to deploy MongoDB, but for this tutorial, we will use Docker as it is a matter of one command:</p> DockerDocker Compose <p>docker run -d \\     --name mongodb \\     --restart unless-stopped \\     -p 27017:27017 \\     -v /data/db \\     mongo:latest(returns a big hash code)</p> <p>docker compose -f docker-compose.dev.yml up mongodb -d[+] Running 1/1\u2714 Container mongodb  Started</p>"},{"location":"tutorials/your-first-bot/#creating-our-first-user","title":"Creating our first user","text":"<p>Last but not least, before we start the bot, we need to register our fist user. For that, we need our account's ID, which you can obtain by messaging this bot on Telegram.</p> <p>We will add this first user as an administrator, so it will have permission to use all actions. Later we will see how we can customize each user's permissions.</p> <p>To add it, we just need to run this command (substituting <code>user_id</code> with your actual Telegram ID):</p> kamihi user add user_id --admin2025-01-01 at 00:00:00 | SUCCESS  | User added. telegram_id=&lt;your_user_id&gt;, is_admin=True"},{"location":"tutorials/your-first-bot/#running-the-bot","title":"Running the bot","text":"<p>We are now ready to start our bot for the first time! To do so, just run this command in the root of your project:</p> kamihi run2025-01-01 at 00:00:00 | INFO     | Web server started on http://localhost:4242 host='localhost', port=42422025-01-01 at 00:00:00 | SUCCESS  | Started! <p>You can now go to Telegram and start a conversation with your bot by sending the command <code>/start</code>.</p> <p></p>"},{"location":"tutorials/your-first-bot/#what-now","title":"What now?","text":"<p>Now that you have a basic bot up and running, you can start adding some actions to it. We have just scratched the surface of what you can do with Kamihi. Check out the next tutorial on how to add more actions, or the guides for more in-depth information on how to use Kamihi to the fullest.</p>"},{"location":"reference/kamihi/","title":"kamihi","text":""},{"location":"reference/kamihi/#kamihi","title":"kamihi","text":"<p>Kamihi is a Python framework for creating and managing Telegram bots.</p> License <p>MIT</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>The version of the package.</p> <code>bot</code> <code>Bot</code> <p>The bot instance for the Kamihi framework. Preferable to using the Bot class directly, as it ensures that the bot is properly configured and managed by the framework.</p> <p>Modules:</p> Name Description <code>base</code> <p>Base module for the Kamihi framework.</p> <code>bot</code> <p>Bot module for Kamihi.</p> <code>cli</code> <p>Command-line utility for the Kamihi framework.</p> <code>db</code> <p>Database connections module for the Kamihi framework.</p> <code>tg</code> <p>Telegram module for Kamihi.</p> <code>users</code> <p>Users module of the Kamihi framework.</p> <code>web</code> <p>Web interface module for Kamihi.</p> <p>Classes:</p> Name Description <code>BaseUser</code> <p>Placeholder for the User model.</p> <code>KamihiSettings</code> <p>Defines the configuration schema for the Kamihi framework.</p>"},{"location":"reference/kamihi/#kamihi.BaseUser","title":"BaseUser","text":"<p>               Bases: <code>Document</code></p> <p>Placeholder for the User model.</p> <p>Methods:</p> Name Description <code>get_model</code> <p>Get the model class for the User.</p> <code>set_model</code> <p>Set the model class for the User.</p>"},{"location":"reference/kamihi/#kamihi.BaseUser.get_model","title":"get_model  <code>classmethod</code>","text":"<pre><code>get_model() -&gt; type[User]\n</code></pre> <p>Get the model class for the User.</p> <p>Returns:</p> Name Type Description <code>type</code> <code>type[User]</code> <p>The model class for the User.</p> Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef get_model(cls) -&gt; type[\"User\"]:\n    \"\"\"\n    Get the model class for the User.\n\n    Returns:\n        type: The model class for the User.\n\n    \"\"\"\n    return cls if cls._model is None else cls._model\n</code></pre>"},{"location":"reference/kamihi/#kamihi.BaseUser.set_model","title":"set_model  <code>classmethod</code>","text":"<pre><code>set_model(model: type[User]) -&gt; None\n</code></pre> <p>Set the model class for the User.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <p>The model class to set.</p> required Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef set_model(cls, model: type[\"User\"]) -&gt; None:\n    \"\"\"\n    Set the model class for the User.\n\n    Args:\n        model (type): The model class to set.\n\n    \"\"\"\n    cls._model = model\n</code></pre>"},{"location":"reference/kamihi/#kamihi.BaseUser.set_model(model)","title":"<code>model</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings","title":"KamihiSettings","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Defines the configuration schema for the Kamihi framework.</p> <p>Attributes:</p> Name Type Description <code>timezone</code> <code>str</code> <p>The timezone for the application.</p> <code>log</code> <code>LogSettings</code> <p>The logging settings.</p> <code>db</code> <code>DatabaseSettings</code> <p>The database settings.</p> <code>token</code> <code>str | None</code> <p>The Telegram bot token.</p> <code>responses</code> <code>ResponseSettings</code> <p>The response settings.</p> <code>web</code> <code>WebSettings</code> <p>The web settings.</p> <p>Methods:</p> Name Description <code>from_yaml</code> <p>Load settings from a custom YAML file.</p> <code>settings_customise_sources</code> <p>Customize the order of settings sources.</p>"},{"location":"reference/kamihi/#kamihi.KamihiSettings.timezone_obj","title":"timezone_obj  <code>property</code>","text":"<pre><code>timezone_obj: DstTzInfo\n</code></pre> <p>Get the timezone object.</p> <p>Returns:</p> Name Type Description <code>DstTzInfo</code> <code>DstTzInfo</code> <p>The timezone object.</p>"},{"location":"reference/kamihi/#kamihi.KamihiSettings.from_yaml","title":"from_yaml  <code>classmethod</code>","text":"<pre><code>from_yaml(path: Path) -&gt; KamihiSettings\n</code></pre> <p>Load settings from a custom YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>Path</code> <p>The path to the YAML file.</p> required <p>Returns:</p> Name Type Description <code>KamihiSettings</code> <code>KamihiSettings</code> <p>An instance of KamihiSettings with the loaded settings.</p> Source code in <code>src/kamihi/base/config.py</code> <pre><code>@classmethod\ndef from_yaml(cls, path: Path) -&gt; \"KamihiSettings\":\n    \"\"\"\n    Load settings from a custom YAML file.\n\n    Args:\n        path (Path): The path to the YAML file.\n\n    Returns:\n        KamihiSettings: An instance of KamihiSettings with the loaded settings.\n\n    \"\"\"\n    if path.exists() and path.is_file():\n        with path.open(\"r\", encoding=\"utf-8\") as f:\n            data = yaml.safe_load(f)\n        if data and isinstance(data, dict):\n            return cls(**data)\n    return cls()\n</code></pre>"},{"location":"reference/kamihi/#kamihi.KamihiSettings.from_yaml(path)","title":"<code>path</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre> <p>Customize the order of settings sources.</p> <p>This method allows you to customize the order in which settings sources are loaded. The order of sources is important because it determines which settings take precedence when there are conflicts. The order of sources is as follows:     1. Environment variables     2. .env file     3. YAML file     4. Initial settings</p> <p>Parameters:</p> Name Type Description Default <code>type[BaseSettings]</code> <p>the settings class to customize sources for</p> required <code>PydanticBaseSettingsSource</code> <p>settings from class initialization</p> required <code>PydanticBaseSettingsSource</code> <p>settings from environment variables</p> required <code>PydanticBaseSettingsSource</code> <p>settings from .env file</p> required <code>PydanticBaseSettingsSource</code> <p>settings from file secrets</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[PydanticBaseSettingsSource, ...]</code> <p>A tuple containing the customized settings sources in the desired order.</p> Source code in <code>src/kamihi/base/config.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n    \"\"\"\n    Customize the order of settings sources.\n\n    This method allows you to customize the order in which settings sources are\n    loaded. The order of sources is important because it determines which settings\n    take precedence when there are conflicts.\n    The order of sources is as follows:\n        1. Environment variables\n        2. .env file\n        3. YAML file\n        4. Initial settings\n\n    Args:\n        settings_cls: the settings class to customize sources for\n        init_settings: settings from class initialization\n        env_settings: settings from environment variables\n        dotenv_settings: settings from .env file\n        file_secret_settings: settings from file secrets\n\n    Returns:\n        tuple: A tuple containing the customized settings sources in the desired order.\n\n    \"\"\"\n    return (\n        init_settings,\n        env_settings,\n        dotenv_settings,\n        YamlConfigSettingsSource(\n            settings_cls, yaml_file=[os.getenv(\"KAMIHI_CONFIG_FILE\", \"kamihi.yaml\"), \"kamihi.yaml\", \"kamihi.yml\"]\n        ),\n        file_secret_settings,\n    )\n</code></pre>"},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(settings_cls)","title":"<code>settings_cls</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(init_settings)","title":"<code>init_settings</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(env_settings)","title":"<code>env_settings</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(dotenv_settings)","title":"<code>dotenv_settings</code>","text":""},{"location":"reference/kamihi/#kamihi.KamihiSettings.settings_customise_sources(file_secret_settings)","title":"<code>file_secret_settings</code>","text":""},{"location":"reference/kamihi/base/","title":"kamihi.base","text":""},{"location":"reference/kamihi/base/#kamihi.base","title":"kamihi.base","text":"<p>Base module for the Kamihi framework.</p> <p>Provides base utilities and classes for the framework.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>config</code> <p>Configuration module.</p> <code>logging</code> <p>Logging configuration module.</p> <code>manual_send</code> <p>Module for sending alerts to notification services.</p>"},{"location":"reference/kamihi/base/config/","title":"kamihi.base.config","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config","title":"kamihi.base.config","text":"<p>Configuration module.</p> <p>This module contains the configuration settings for the Kamihi framework. The configuration settings are loaded from environment variables and/or a <code>.env</code> file. They must begin with the prefix <code>KAMIHI_</code>.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>DatabaseSettings</code> <p>Defines the database settings schema.</p> <code>KamihiSettings</code> <p>Defines the configuration schema for the Kamihi framework.</p> <code>LogLevel</code> <p>Enum for log levels.</p> <code>LogSettings</code> <p>Defines the logging configuration schema.</p> <code>ResponseSettings</code> <p>Defines the response settings schema.</p> <code>WebSettings</code> <p>Defines the web settings schema.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.DatabaseSettings","title":"DatabaseSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the database settings schema.</p> <p>Attributes:</p> Name Type Description <code>host</code> <code>str</code> <p>The URL of the database.</p> <code>name</code> <code>str</code> <p>The name of the database.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings","title":"KamihiSettings","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Defines the configuration schema for the Kamihi framework.</p> <p>Attributes:</p> Name Type Description <code>timezone</code> <code>str</code> <p>The timezone for the application.</p> <code>log</code> <code>LogSettings</code> <p>The logging settings.</p> <code>db</code> <code>DatabaseSettings</code> <p>The database settings.</p> <code>token</code> <code>str | None</code> <p>The Telegram bot token.</p> <code>responses</code> <code>ResponseSettings</code> <p>The response settings.</p> <code>web</code> <code>WebSettings</code> <p>The web settings.</p> <p>Methods:</p> Name Description <code>from_yaml</code> <p>Load settings from a custom YAML file.</p> <code>settings_customise_sources</code> <p>Customize the order of settings sources.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.timezone_obj","title":"timezone_obj  <code>property</code>","text":"<pre><code>timezone_obj: DstTzInfo\n</code></pre> <p>Get the timezone object.</p> <p>Returns:</p> Name Type Description <code>DstTzInfo</code> <code>DstTzInfo</code> <p>The timezone object.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.from_yaml","title":"from_yaml  <code>classmethod</code>","text":"<pre><code>from_yaml(path: Path) -&gt; KamihiSettings\n</code></pre> <p>Load settings from a custom YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>Path</code> <p>The path to the YAML file.</p> required <p>Returns:</p> Name Type Description <code>KamihiSettings</code> <code>KamihiSettings</code> <p>An instance of KamihiSettings with the loaded settings.</p> Source code in <code>src/kamihi/base/config.py</code> <pre><code>@classmethod\ndef from_yaml(cls, path: Path) -&gt; \"KamihiSettings\":\n    \"\"\"\n    Load settings from a custom YAML file.\n\n    Args:\n        path (Path): The path to the YAML file.\n\n    Returns:\n        KamihiSettings: An instance of KamihiSettings with the loaded settings.\n\n    \"\"\"\n    if path.exists() and path.is_file():\n        with path.open(\"r\", encoding=\"utf-8\") as f:\n            data = yaml.safe_load(f)\n        if data and isinstance(data, dict):\n            return cls(**data)\n    return cls()\n</code></pre>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.from_yaml(path)","title":"<code>path</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre> <p>Customize the order of settings sources.</p> <p>This method allows you to customize the order in which settings sources are loaded. The order of sources is important because it determines which settings take precedence when there are conflicts. The order of sources is as follows:     1. Environment variables     2. .env file     3. YAML file     4. Initial settings</p> <p>Parameters:</p> Name Type Description Default <code>type[BaseSettings]</code> <p>the settings class to customize sources for</p> required <code>PydanticBaseSettingsSource</code> <p>settings from class initialization</p> required <code>PydanticBaseSettingsSource</code> <p>settings from environment variables</p> required <code>PydanticBaseSettingsSource</code> <p>settings from .env file</p> required <code>PydanticBaseSettingsSource</code> <p>settings from file secrets</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[PydanticBaseSettingsSource, ...]</code> <p>A tuple containing the customized settings sources in the desired order.</p> Source code in <code>src/kamihi/base/config.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n    \"\"\"\n    Customize the order of settings sources.\n\n    This method allows you to customize the order in which settings sources are\n    loaded. The order of sources is important because it determines which settings\n    take precedence when there are conflicts.\n    The order of sources is as follows:\n        1. Environment variables\n        2. .env file\n        3. YAML file\n        4. Initial settings\n\n    Args:\n        settings_cls: the settings class to customize sources for\n        init_settings: settings from class initialization\n        env_settings: settings from environment variables\n        dotenv_settings: settings from .env file\n        file_secret_settings: settings from file secrets\n\n    Returns:\n        tuple: A tuple containing the customized settings sources in the desired order.\n\n    \"\"\"\n    return (\n        init_settings,\n        env_settings,\n        dotenv_settings,\n        YamlConfigSettingsSource(\n            settings_cls, yaml_file=[os.getenv(\"KAMIHI_CONFIG_FILE\", \"kamihi.yaml\"), \"kamihi.yaml\", \"kamihi.yml\"]\n        ),\n        file_secret_settings,\n    )\n</code></pre>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(settings_cls)","title":"<code>settings_cls</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(init_settings)","title":"<code>init_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(env_settings)","title":"<code>env_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(dotenv_settings)","title":"<code>dotenv_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.KamihiSettings.settings_customise_sources(file_secret_settings)","title":"<code>file_secret_settings</code>","text":""},{"location":"reference/kamihi/base/config/#kamihi.base.config.LogLevel","title":"LogLevel","text":"<p>               Bases: <code>StrEnum</code></p> <p>Enum for log levels.</p> <p>This enum defines the log levels used in the logging configuration.</p> <p>Attributes:</p> Name Type Description <code>TRACE</code> <p>Trace level logging.</p> <code>DEBUG</code> <p>Debug level logging.</p> <code>INFO</code> <p>Info level logging.</p> <code>SUCCESS</code> <p>Success level logging.</p> <code>WARNING</code> <p>Warning level logging.</p> <code>ERROR</code> <p>Error level logging.</p> <code>CRITICAL</code> <p>Critical level logging.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.LogSettings","title":"LogSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the logging configuration schema.</p> <p>Attributes:</p> Name Type Description <code>stdout_enable</code> <code>bool</code> <p>Enable or disable stdout logging.</p> <code>stdout_level</code> <code>str</code> <p>Log level for stdout logging.</p> <code>stdout_serialize</code> <code>bool</code> <p>Enable or disable serialization for stdout logging.</p> <code>stderr_enable</code> <code>bool</code> <p>Enable or disable stderr logging.</p> <code>stderr_level</code> <code>str</code> <p>Log level for stderr logging.</p> <code>stderr_serialize</code> <code>bool</code> <p>Enable or disable serialization for stderr logging.</p> <code>file_enable</code> <code>bool</code> <p>Enable or disable file logging.</p> <code>file_level</code> <code>str</code> <p>Log level for file logging.</p> <code>file_path</code> <code>str</code> <p>Path to the log file.</p> <code>file_serialize</code> <code>bool</code> <p>Enable or disable serialization for file logging.</p> <code>file_rotation</code> <code>str</code> <p>Rotation policy for the log file.</p> <code>file_retention</code> <code>str</code> <p>Retention policy for the log file.</p> <code>notification_enable</code> <code>bool</code> <p>Enable or disable notification logging.</p> <code>notification_level</code> <code>str</code> <p>Log level for notification logging.</p> <code>notification_urls</code> <code>list[str]</code> <p>List of URLs for notification services.</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.ResponseSettings","title":"ResponseSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the response settings schema.</p> <p>Attributes:</p> Name Type Description <code>default_enabled(bool)</code> <p>Whether to enable the default message</p> <code>default_message(str)</code> <p>The message to return when no handler has been triggered</p> <code>error_message(str)</code> <p>The message to send to the user when an error happens</p>"},{"location":"reference/kamihi/base/config/#kamihi.base.config.WebSettings","title":"WebSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the web settings schema.</p> <p>Attributes:</p> Name Type Description <code>host</code> <code>str</code> <p>The host of the web interface.</p> <code>port</code> <code>int</code> <p>The port of the web interface.</p>"},{"location":"reference/kamihi/base/logging/","title":"kamihi.base.logging","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging","title":"kamihi.base.logging","text":"<p>Logging configuration module.</p> <p>This module provides functions to configure logging for the Kamihi framework.</p> License <p>MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi.base.logging import configure_logging\n&gt;&gt;&gt; from kamihi.base.config import LogSettings\n&gt;&gt;&gt; from loguru import logger\n&gt;&gt;&gt; settings = LogSettings()\n&gt;&gt;&gt; configure_logging(logger, settings)\n&gt;&gt;&gt; logger.info(\"This is an info message.\")\n</code></pre> <p>Classes:</p> Name Description <code>MongoLogger</code> <p>MongoDB command logger.</p> <p>Functions:</p> Name Description <code>configure_logging</code> <p>Configure logging for the module.</p>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger","title":"MongoLogger","text":"<pre><code>MongoLogger(logger: Logger)\n</code></pre> <p>               Bases: <code>CommandListener</code></p> <p>MongoDB command logger.</p> <p>This class listens to MongoDB commands and logs them using the loguru logger.</p> <p>Parameters:</p> Name Type Description Default <code>Logger</code> <p>The loguru logger instance to use for logging.</p> required <p>Initialize the MongoLogger.</p> <p>Parameters:</p> Name Type Description Default <code>Logger</code> <p>The loguru logger instance to use for logging.</p> required <p>Methods:</p> Name Description <code>failed</code> <p>Log the failure of a command.</p> <code>started</code> <p>Log the start of a command.</p> <code>succeeded</code> <p>Log the success of a command.</p> Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def __init__(self, logger: loguru.Logger) -&gt; None:\n    \"\"\"\n    Initialize the MongoLogger.\n\n    Args:\n        logger: The loguru logger instance to use for logging.\n\n    \"\"\"\n    super().__init__()\n    self.logger = logger\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger(logger)","title":"<code>logger</code>","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger(logger)","title":"<code>logger</code>","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger.failed","title":"failed","text":"<pre><code>failed(event: CommandFailedEvent) -&gt; None\n</code></pre> <p>Log the failure of a command.</p> Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def failed(self, event: CommandFailedEvent) -&gt; None:\n    \"\"\"Log the failure of a command.\"\"\"\n    self.logger.debug(\n        \"Request failed\",\n        command_name=event.command_name,\n        request_id=event.request_id,\n        connection_id=event.connection_id,\n        micoseconds=event.duration_micros,\n        error=event.failure,\n    )\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger.started","title":"started","text":"<pre><code>started(event: CommandStartedEvent) -&gt; None\n</code></pre> <p>Log the start of a command.</p> Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def started(self, event: monitoring.CommandStartedEvent) -&gt; None:\n    \"\"\"Log the start of a command.\"\"\"\n    self.logger.trace(\n        \"Executing request\",\n        command_name=event.command_name,\n        request_id=event.request_id,\n        connection_id=event.connection_id,\n    )\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.MongoLogger.succeeded","title":"succeeded","text":"<pre><code>succeeded(event: CommandSucceededEvent) -&gt; None\n</code></pre> <p>Log the success of a command.</p> Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def succeeded(self, event: monitoring.CommandSucceededEvent) -&gt; None:\n    \"\"\"Log the success of a command.\"\"\"\n    self.logger.trace(\n        \"Request succeeded\",\n        command_name=event.command_name,\n        request_id=event.request_id,\n        connection_id=event.connection_id,\n        micoseconds=event.duration_micros,\n    )\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.configure_logging","title":"configure_logging","text":"<pre><code>configure_logging(\n    logger: Logger, settings: LogSettings\n) -&gt; None\n</code></pre> <p>Configure logging for the module.</p> <p>This function sets up the logging configuration for the module, including log level and format.</p> <p>Parameters:</p> Name Type Description Default <code>Logger</code> <p>The logger instance to configure.</p> required <code>LogSettings</code> <p>The logging settings to configure.</p> required Source code in <code>src/kamihi/base/logging.py</code> <pre><code>def configure_logging(logger: loguru.Logger, settings: LogSettings) -&gt; None:\n    \"\"\"\n    Configure logging for the module.\n\n    This function sets up the logging configuration for the module, including\n    log level and format.\n\n    Args:\n        logger: The logger instance to configure.\n        settings: The logging settings to configure.\n\n    \"\"\"\n    logger.remove()\n\n    logger.configure(patcher=_extra_formatter, extra={\"compact\": \"\"})\n\n    if settings.stdout_enable:\n        logger.add(\n            sys.stdout,\n            level=settings.stdout_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"{message} \"\n            \"&lt;dim&gt;{extra[compact]}&lt;/dim&gt;\",\n            serialize=settings.stdout_serialize,\n            enqueue=True,\n        )\n\n    if settings.stderr_enable:\n        logger.add(\n            sys.stderr,\n            level=settings.stderr_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"{message} \"\n            \"&lt;dim&gt;{extra[compact]}&lt;/dim&gt;\",\n            serialize=settings.stderr_serialize,\n            enqueue=True,\n        )\n\n    if settings.file_enable:\n        logger.add(\n            settings.file_path,\n            level=settings.file_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"{message} \"\n            \"&lt;dim&gt;{extra[compact]}&lt;/dim&gt;\",\n            serialize=settings.file_serialize,\n            rotation=settings.file_rotation,\n            retention=settings.file_retention,\n            enqueue=True,\n        )\n\n    if settings.notification_enable:\n        manual_sender = ManualSender(settings.notification_urls)\n        logger.add(\n            manual_sender.notify,\n            level=settings.notification_level,\n            format=\"&lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss}&lt;/green&gt; | \"\n            \"&lt;level&gt;{level: &lt;8}&lt;/level&gt; | \"\n            \"{message} \"\n            \"&lt;dim&gt;{extra[compact]}&lt;/dim&gt;\",\n            filter={\"apprise\": False},\n            enqueue=True,\n        )\n\n    monitoring.register(MongoLogger(logger))\n</code></pre>"},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.configure_logging(logger)","title":"<code>logger</code>","text":""},{"location":"reference/kamihi/base/logging/#kamihi.base.logging.configure_logging(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/base/manual_send/","title":"kamihi.base.manual_send","text":""},{"location":"reference/kamihi/base/manual_send/#kamihi.base.manual_send","title":"kamihi.base.manual_send","text":"<p>Module for sending alerts to notification services.</p> <p>This module provides functions for sending alerts to notification services using the Apprise library.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>ManualSender</code> <p>Class for sending alerts to notification services.</p>"},{"location":"reference/kamihi/base/manual_send/#kamihi.base.manual_send.ManualSender","title":"ManualSender","text":"<pre><code>ManualSender(urls: list[str])\n</code></pre> <p>               Bases: <code>Apprise</code></p> <p>Class for sending alerts to notification services.</p> <p>This class extends the Apprise library to provide a simple interface for sending alerts to various notification services using Apprise URLs.</p> <p>Manual sender.</p> <p>Parameters:</p> Name Type Description Default <code>list[str]</code> <p>List of Apprise URLs for sending alerts through notification services.</p> required Source code in <code>src/kamihi/base/manual_send.py</code> <pre><code>def __init__(self, urls: list[str]) -&gt; None:\n    \"\"\"\n    Manual sender.\n\n    Args:\n        urls: List of Apprise URLs for sending alerts through notification services.\n\n    \"\"\"\n    super().__init__()\n    self.add(urls)\n</code></pre>"},{"location":"reference/kamihi/base/manual_send/#kamihi.base.manual_send.ManualSender(urls)","title":"<code>urls</code>","text":""},{"location":"reference/kamihi/bot/","title":"kamihi.bot","text":""},{"location":"reference/kamihi/bot/#kamihi.bot","title":"kamihi.bot","text":"<p>Bot module for Kamihi.</p> <p>This module provides the primary interface for the Kamihi framework, allowing for the creation and management of Telegram bots.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>action</code> <p>Action helper class.</p> <code>bot</code> <p>Bot module for Kamihi.</p> <code>models</code> <p>Database models for the bot module.</p> <code>utils</code> <p>Utilities and constants for the bot module.</p> <p>Classes:</p> Name Description <code>Action</code> <p>Action class for Kamihi bot.</p> <code>Bot</code> <p>Bot class for Kamihi.</p>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action","title":"Action","text":"<pre><code>Action(\n    name: str,\n    commands: list[str],\n    description: str,\n    func: Callable,\n)\n</code></pre> <p>Action class for Kamihi bot.</p> <p>This class provides helpers for defining actions, their commands and their handlers.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>commands</code> <code>list[str]</code> <p>List of commands associated.</p> <code>description</code> <code>str</code> <p>Description of the action.</p> <p>Initialize the Action class.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the action.</p> required <code>list[str]</code> <p>List of commands associated.</p> required <code>str</code> <p>Description of the action.</p> required <code>Callable</code> <p>The function to be executed when the action is called.</p> required <p>Methods:</p> Name Description <code>clean_up</code> <p>Clean up the action from the database.</p> <code>is_valid</code> <p>Check if the action is valid.</p> <code>save_to_db</code> <p>Save the action to the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def __init__(self, name: str, commands: list[str], description: str, func: Callable) -&gt; None:\n    \"\"\"\n    Initialize the Action class.\n\n    Args:\n        name (str): The name of the action.\n        commands (list[str]): List of commands associated.\n        description (str): Description of the action.\n        func (Callable): The function to be executed when the action is called.\n\n    \"\"\"\n    self.name = name\n    self.commands = commands\n    self.description = description\n\n    self._func = func\n    self._logger = logger.bind(action=self.name)\n\n    self._validate_commands()\n    self._validate_function()\n\n    if not self.is_valid():\n        self._db_object = None\n        self._logger.warning(\"Failed to register\")\n        return\n\n    self._db_object = self.save_to_db()\n\n    self._templates = Environment(\n        loader=FileSystemLoader(Path(self._func.__code__.co_filename).parent),\n        autoescape=select_autoescape(default_for_string=False),\n    )\n\n    self._logger.debug(\"Successfully registered\")\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action(name)","title":"<code>name</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Action(commands)","title":"<code>commands</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Action(description)","title":"<code>description</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Action(func)","title":"<code>func</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Action.handler","title":"handler  <code>property</code>","text":"<pre><code>handler: AuthHandler\n</code></pre> <p>Construct a CommandHandler for the action.</p>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action.clean_up","title":"clean_up  <code>classmethod</code>","text":"<pre><code>clean_up(keep: list[str]) -&gt; None\n</code></pre> <p>Clean up the action from the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>@classmethod\ndef clean_up(cls, keep: list[str]) -&gt; None:\n    \"\"\"Clean up the action from the database.\"\"\"\n    RegisteredAction.objects(name__nin=keep).delete()\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action.is_valid","title":"is_valid","text":"<pre><code>is_valid() -&gt; bool\n</code></pre> <p>Check if the action is valid.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def is_valid(self) -&gt; bool:\n    \"\"\"Check if the action is valid.\"\"\"\n    return self._valid\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Action.save_to_db","title":"save_to_db","text":"<pre><code>save_to_db() -&gt; RegisteredAction\n</code></pre> <p>Save the action to the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def save_to_db(self) -&gt; RegisteredAction:\n    \"\"\"Save the action to the database.\"\"\"\n    return RegisteredAction.objects(name=self.name).upsert_one(\n        name=self.name,\n        description=self.description,\n    )\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot","title":"Bot","text":"<pre><code>Bot(settings: KamihiSettings)\n</code></pre> <p>Bot class for Kamihi.</p> <p>The framework already provides a bot instance, which can be accessed using the <code>bot</code> variable. This instance is already configured with default settings and can be used to start the bot. The managed instance is preferable to using the <code>Bot</code> class directly, as it ensures that the bot is properly configured and managed by the framework.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>KamihiSettings</code> <p>The settings for the bot.</p> <p>Initialize the Bot class.</p> <p>Parameters:</p> Name Type Description Default <code>KamihiSettings</code> <p>The settings for the bot.</p> required <p>Methods:</p> Name Description <code>action</code> <p>Register an action with the bot.</p> <code>start</code> <p>Start the bot.</p> <code>user_class</code> <p>Set the user model for the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def __init__(self, settings: KamihiSettings) -&gt; None:\n    \"\"\"\n    Initialize the Bot class.\n\n    Args:\n        settings: The settings for the bot.\n\n    \"\"\"\n    self.settings = settings\n\n    # Connects to the database\n    connect(self.settings.db)\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.action","title":"action","text":"<pre><code>action(\n    *commands: str, description: str = None\n) -&gt; partial[Action]\n</code></pre> <p>Register an action with the bot.</p> <p>This method overloads the <code>bot.action</code> method so the decorator can be used with or without parentheses.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>A list of command names. If not provided, the function name will be used.</p> <code>()</code> <code>str</code> <p>A description of the action. This will be used in the help message.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>partial[Action]</code> <p>The wrapped function.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>@dispatch([str])\ndef action(self, *commands: str, description: str = None) -&gt; partial[Action]:\n    \"\"\"\n    Register an action with the bot.\n\n    This method overloads the `bot.action` method so the decorator can be used\n    with or without parentheses.\n\n    Args:\n        *commands: A list of command names. If not provided, the function name will be used.\n        description: A description of the action. This will be used in the help message.\n\n    Returns:\n        Callable: The wrapped function.\n\n    \"\"\"\n    return functools.partial(self.action, *commands, description=description)\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.action(*commands)","title":"<code>*commands</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.action(description)","title":"<code>description</code>","text":""},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the bot.\"\"\"\n    # Cleans up the database of actions that are not present in code\n    Action.clean_up([action.name for action in self._actions])\n    logger.debug(\"Removed actions not present in code from database\")\n\n    # Warns the user if there are no valid actions registered\n    if not self._valid_actions:\n        logger.warning(\"No valid actions were registered. The bot will not respond to any commands.\")\n\n    # Loads the Telegram client\n    self._client = TelegramClient(self.settings, self._handlers)\n    logger.trace(\"Initialized Telegram client\")\n\n    # Sets the command scopes for the bot\n    self._client.register_run_once_job(self._reset_scopes, 1)\n    self._client.register_run_once_job(self._set_scopes, 2)\n    logger.trace(\"Initialized command scopes jobs\")\n\n    # Loads the web server\n    self._web = KamihiWeb(\n        self.settings.web,\n        self.settings.db,\n        {\n            \"after_create\": [self._set_scopes],\n            \"after_edit\": [self._set_scopes],\n            \"after_delete\": [self._set_scopes],\n        },\n    )\n    logger.trace(\"Initialized web server\")\n    self._web.start()\n\n    # Runs the client\n    self._client.run()\n\n    # When the client is stopped, stop the database connection\n    disconnect()\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.user_class","title":"user_class","text":"<pre><code>user_class(cls: type[User]) -&gt; None\n</code></pre> <p>Set the user model for the bot.</p> <p>This method is used as a decorator to set the user model for the bot.</p> <p>Parameters:</p> Name Type Description Default <code>type[User]</code> <p>The user class to set.</p> required Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def user_class(self, cls: type[User]) -&gt; None:  # skipcq: PYL-R0201\n    \"\"\"\n    Set the user model for the bot.\n\n    This method is used as a decorator to set the user model for the bot.\n\n    Args:\n        cls: The user class to set.\n\n    \"\"\"\n    User.set_model(cls)\n</code></pre>"},{"location":"reference/kamihi/bot/#kamihi.bot.Bot.user_class(cls)","title":"<code>cls</code>","text":""},{"location":"reference/kamihi/bot/action/","title":"kamihi.bot.action","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action","title":"kamihi.bot.action","text":"<p>Action helper class.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>Action</code> <p>Action class for Kamihi bot.</p>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action","title":"Action","text":"<pre><code>Action(\n    name: str,\n    commands: list[str],\n    description: str,\n    func: Callable,\n)\n</code></pre> <p>Action class for Kamihi bot.</p> <p>This class provides helpers for defining actions, their commands and their handlers.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>commands</code> <code>list[str]</code> <p>List of commands associated.</p> <code>description</code> <code>str</code> <p>Description of the action.</p> <p>Initialize the Action class.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the action.</p> required <code>list[str]</code> <p>List of commands associated.</p> required <code>str</code> <p>Description of the action.</p> required <code>Callable</code> <p>The function to be executed when the action is called.</p> required <p>Methods:</p> Name Description <code>clean_up</code> <p>Clean up the action from the database.</p> <code>is_valid</code> <p>Check if the action is valid.</p> <code>save_to_db</code> <p>Save the action to the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def __init__(self, name: str, commands: list[str], description: str, func: Callable) -&gt; None:\n    \"\"\"\n    Initialize the Action class.\n\n    Args:\n        name (str): The name of the action.\n        commands (list[str]): List of commands associated.\n        description (str): Description of the action.\n        func (Callable): The function to be executed when the action is called.\n\n    \"\"\"\n    self.name = name\n    self.commands = commands\n    self.description = description\n\n    self._func = func\n    self._logger = logger.bind(action=self.name)\n\n    self._validate_commands()\n    self._validate_function()\n\n    if not self.is_valid():\n        self._db_object = None\n        self._logger.warning(\"Failed to register\")\n        return\n\n    self._db_object = self.save_to_db()\n\n    self._templates = Environment(\n        loader=FileSystemLoader(Path(self._func.__code__.co_filename).parent),\n        autoescape=select_autoescape(default_for_string=False),\n    )\n\n    self._logger.debug(\"Successfully registered\")\n</code></pre>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action(name)","title":"<code>name</code>","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action(commands)","title":"<code>commands</code>","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action(description)","title":"<code>description</code>","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action(func)","title":"<code>func</code>","text":""},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action.handler","title":"handler  <code>property</code>","text":"<pre><code>handler: AuthHandler\n</code></pre> <p>Construct a CommandHandler for the action.</p>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action.clean_up","title":"clean_up  <code>classmethod</code>","text":"<pre><code>clean_up(keep: list[str]) -&gt; None\n</code></pre> <p>Clean up the action from the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>@classmethod\ndef clean_up(cls, keep: list[str]) -&gt; None:\n    \"\"\"Clean up the action from the database.\"\"\"\n    RegisteredAction.objects(name__nin=keep).delete()\n</code></pre>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action.is_valid","title":"is_valid","text":"<pre><code>is_valid() -&gt; bool\n</code></pre> <p>Check if the action is valid.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def is_valid(self) -&gt; bool:\n    \"\"\"Check if the action is valid.\"\"\"\n    return self._valid\n</code></pre>"},{"location":"reference/kamihi/bot/action/#kamihi.bot.action.Action.save_to_db","title":"save_to_db","text":"<pre><code>save_to_db() -&gt; RegisteredAction\n</code></pre> <p>Save the action to the database.</p> Source code in <code>src/kamihi/bot/action.py</code> <pre><code>def save_to_db(self) -&gt; RegisteredAction:\n    \"\"\"Save the action to the database.\"\"\"\n    return RegisteredAction.objects(name=self.name).upsert_one(\n        name=self.name,\n        description=self.description,\n    )\n</code></pre>"},{"location":"reference/kamihi/bot/bot/","title":"kamihi.bot.bot","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot","title":"kamihi.bot.bot","text":"<p>Bot module for Kamihi.</p> <p>This module provides the primary interface for the Kamihi framework, allowing for the creation and management of Telegram bots.</p> <p>The framework already provides a bot instance, which can be accessed using the <code>bot</code> variable. This instance is already configured with default settings and can be used to start the bot. The managed instance is preferable to using the <code>Bot</code> class directly, as it ensures that the bot is properly configured and managed by the framework.</p> License <p>MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi import bot\n&gt;&gt;&gt; bot.start()\n</code></pre> <p>Classes:</p> Name Description <code>Bot</code> <p>Bot class for Kamihi.</p>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot","title":"Bot","text":"<pre><code>Bot(settings: KamihiSettings)\n</code></pre> <p>Bot class for Kamihi.</p> <p>The framework already provides a bot instance, which can be accessed using the <code>bot</code> variable. This instance is already configured with default settings and can be used to start the bot. The managed instance is preferable to using the <code>Bot</code> class directly, as it ensures that the bot is properly configured and managed by the framework.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>KamihiSettings</code> <p>The settings for the bot.</p> <p>Initialize the Bot class.</p> <p>Parameters:</p> Name Type Description Default <code>KamihiSettings</code> <p>The settings for the bot.</p> required <p>Methods:</p> Name Description <code>action</code> <p>Register an action with the bot.</p> <code>start</code> <p>Start the bot.</p> <code>user_class</code> <p>Set the user model for the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def __init__(self, settings: KamihiSettings) -&gt; None:\n    \"\"\"\n    Initialize the Bot class.\n\n    Args:\n        settings: The settings for the bot.\n\n    \"\"\"\n    self.settings = settings\n\n    # Connects to the database\n    connect(self.settings.db)\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.action","title":"action","text":"<pre><code>action(\n    *commands: str, description: str = None\n) -&gt; partial[Action]\n</code></pre> <p>Register an action with the bot.</p> <p>This method overloads the <code>bot.action</code> method so the decorator can be used with or without parentheses.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>A list of command names. If not provided, the function name will be used.</p> <code>()</code> <code>str</code> <p>A description of the action. This will be used in the help message.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>partial[Action]</code> <p>The wrapped function.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>@dispatch([str])\ndef action(self, *commands: str, description: str = None) -&gt; partial[Action]:\n    \"\"\"\n    Register an action with the bot.\n\n    This method overloads the `bot.action` method so the decorator can be used\n    with or without parentheses.\n\n    Args:\n        *commands: A list of command names. If not provided, the function name will be used.\n        description: A description of the action. This will be used in the help message.\n\n    Returns:\n        Callable: The wrapped function.\n\n    \"\"\"\n    return functools.partial(self.action, *commands, description=description)\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.action(*commands)","title":"<code>*commands</code>","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.action(description)","title":"<code>description</code>","text":""},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the bot.</p> Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the bot.\"\"\"\n    # Cleans up the database of actions that are not present in code\n    Action.clean_up([action.name for action in self._actions])\n    logger.debug(\"Removed actions not present in code from database\")\n\n    # Warns the user if there are no valid actions registered\n    if not self._valid_actions:\n        logger.warning(\"No valid actions were registered. The bot will not respond to any commands.\")\n\n    # Loads the Telegram client\n    self._client = TelegramClient(self.settings, self._handlers)\n    logger.trace(\"Initialized Telegram client\")\n\n    # Sets the command scopes for the bot\n    self._client.register_run_once_job(self._reset_scopes, 1)\n    self._client.register_run_once_job(self._set_scopes, 2)\n    logger.trace(\"Initialized command scopes jobs\")\n\n    # Loads the web server\n    self._web = KamihiWeb(\n        self.settings.web,\n        self.settings.db,\n        {\n            \"after_create\": [self._set_scopes],\n            \"after_edit\": [self._set_scopes],\n            \"after_delete\": [self._set_scopes],\n        },\n    )\n    logger.trace(\"Initialized web server\")\n    self._web.start()\n\n    # Runs the client\n    self._client.run()\n\n    # When the client is stopped, stop the database connection\n    disconnect()\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.user_class","title":"user_class","text":"<pre><code>user_class(cls: type[User]) -&gt; None\n</code></pre> <p>Set the user model for the bot.</p> <p>This method is used as a decorator to set the user model for the bot.</p> <p>Parameters:</p> Name Type Description Default <code>type[User]</code> <p>The user class to set.</p> required Source code in <code>src/kamihi/bot/bot.py</code> <pre><code>def user_class(self, cls: type[User]) -&gt; None:  # skipcq: PYL-R0201\n    \"\"\"\n    Set the user model for the bot.\n\n    This method is used as a decorator to set the user model for the bot.\n\n    Args:\n        cls: The user class to set.\n\n    \"\"\"\n    User.set_model(cls)\n</code></pre>"},{"location":"reference/kamihi/bot/bot/#kamihi.bot.bot.Bot.user_class(cls)","title":"<code>cls</code>","text":""},{"location":"reference/kamihi/bot/models/","title":"kamihi.bot.models","text":""},{"location":"reference/kamihi/bot/models/#kamihi.bot.models","title":"kamihi.bot.models","text":"<p>Database models for the bot module.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>registered_action</code> <p>RegisteredAction model.</p> <p>Classes:</p> Name Description <code>RegisteredAction</code> <p>RegisteredAction model.</p>"},{"location":"reference/kamihi/bot/models/#kamihi.bot.models.RegisteredAction","title":"RegisteredAction","text":"<p>               Bases: <code>Document</code></p> <p>RegisteredAction model.</p> <p>This model represents an action that is registered in the system. It is used to manage user actions and their associated data.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>description</code> <code>str</code> <p>A description of the action.</p>"},{"location":"reference/kamihi/bot/models/registered_action/","title":"kamihi.bot.models.registered_action","text":""},{"location":"reference/kamihi/bot/models/registered_action/#kamihi.bot.models.registered_action","title":"kamihi.bot.models.registered_action","text":"<p>RegisteredAction model.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>RegisteredAction</code> <p>RegisteredAction model.</p>"},{"location":"reference/kamihi/bot/models/registered_action/#kamihi.bot.models.registered_action.RegisteredAction","title":"RegisteredAction","text":"<p>               Bases: <code>Document</code></p> <p>RegisteredAction model.</p> <p>This model represents an action that is registered in the system. It is used to manage user actions and their associated data.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>description</code> <code>str</code> <p>A description of the action.</p>"},{"location":"reference/kamihi/bot/utils/","title":"kamihi.bot.utils","text":""},{"location":"reference/kamihi/bot/utils/#kamihi.bot.utils","title":"kamihi.bot.utils","text":"<p>Utilities and constants for the bot module.</p> License <p>MIT</p> <p>Attributes:</p> Name Type Description <code>COMMAND_REGEX</code> <code>Pattern</code> <p>Regular expression pattern for validating command names.</p> <p>Functions:</p> Name Description <code>parse_annotation</code> <p>Parse an annotation, extracting base type and metadata.</p>"},{"location":"reference/kamihi/bot/utils/#kamihi.bot.utils.parse_annotation","title":"parse_annotation","text":"<pre><code>parse_annotation(ann: Any) -&gt; tuple[type, Any]\n</code></pre> <p>Parse an annotation, extracting base type and metadata.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> <p>The annotation to parse.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[type, Any]</code> <p>A tuple containing the base type and metadata.</p> Source code in <code>src/kamihi/bot/utils.py</code> <pre><code>def parse_annotation(ann: Any) -&gt; tuple[type, Any]:  # noqa: ANN401\n    \"\"\"\n    Parse an annotation, extracting base type and metadata.\n\n    Args:\n        ann (Any): The annotation to parse.\n\n    Returns:\n        tuple: A tuple containing the base type and metadata.\n\n    \"\"\"\n    origin = get_origin(ann)\n    if origin is Annotated:\n        args = get_args(ann)\n        base_type = args[0]\n        metadata = args[1]\n        return base_type, metadata\n    return ann, None\n</code></pre>"},{"location":"reference/kamihi/bot/utils/#kamihi.bot.utils.parse_annotation(ann)","title":"<code>ann</code>","text":""},{"location":"reference/kamihi/cli/","title":"kamihi.cli","text":""},{"location":"reference/kamihi/cli/#kamihi.cli","title":"kamihi.cli","text":"<p>Command-line utility for the Kamihi framework.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>cli</code> <p>Main file of the CLI utility for the Kamihi framework.</p> <code>commands</code> <p>Commands for Kamihi CLI.</p>"},{"location":"reference/kamihi/cli/cli/","title":"kamihi.cli.cli","text":""},{"location":"reference/kamihi/cli/cli/#kamihi.cli.cli","title":"kamihi.cli.cli","text":"<p>Main file of the CLI utility for the Kamihi framework.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>Context</code> <p>Context for the Kamihi CLI utility.</p> <p>Functions:</p> Name Description <code>main</code> <p>Kamihi CLI utility.</p>"},{"location":"reference/kamihi/cli/cli/#kamihi.cli.cli.Context","title":"Context","text":"<pre><code>Context()\n</code></pre> <p>Context for the Kamihi CLI utility.</p> <p>This class holds the context data for the CLI commands.</p> <p>Initialize the context with default values.</p> Source code in <code>src/kamihi/cli/cli.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the context with default values.\"\"\"\n    self.cwd: Path = Path.cwd()\n    self.templates: Path = Path(__file__).parent / \"templates\"\n    self.project: Path = self.cwd\n    self.config: Path = self.project / \"kamihi.yaml\"\n</code></pre>"},{"location":"reference/kamihi/cli/cli/#kamihi.cli.cli.main","title":"main","text":"<pre><code>main(\n    ctx: Context,\n    config: Annotated[\n        Path | None,\n        Option(\n            ...,\n            help=\"Path to the Kamihi configuration file\",\n            exists=True,\n            file_okay=True,\n            dir_okay=False,\n            readable=True,\n            show_default=yaml,\n        ),\n    ] = None,\n) -&gt; None\n</code></pre> <p>Kamihi CLI utility.</p> <p>This utility provides commands to manage and interact with the Kamihi framework.</p> Source code in <code>src/kamihi/cli/cli.py</code> <pre><code>@app.callback()\ndef main(\n    ctx: typer.Context,\n    config: Annotated[\n        Path | None,\n        typer.Option(\n            ...,\n            help=\"Path to the Kamihi configuration file\",\n            exists=True,\n            file_okay=True,\n            dir_okay=False,\n            readable=True,\n            show_default=\"kamihi.yaml\",\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\n    Kamihi CLI utility.\n\n    This utility provides commands to manage and interact with the Kamihi framework.\n    \"\"\"\n    ctx.obj = Context()\n    if config is not None:\n        ctx.obj.config = config\n</code></pre>"},{"location":"reference/kamihi/cli/commands/","title":"kamihi.cli.commands","text":""},{"location":"reference/kamihi/cli/commands/#kamihi.cli.commands","title":"kamihi.cli.commands","text":"<p>Commands for Kamihi CLI.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>action</code> <p>Action-related commands for the Kamihi CLI.</p> <code>init</code> <p>Initialization of projects with Kamihi.</p> <code>run</code> <p>Kamihi framework project execution.</p> <code>user</code> <p>User management module for Kamihi CLI.</p> <code>version</code> <p>Version command for the Kamihi CLI.</p>"},{"location":"reference/kamihi/cli/commands/action/","title":"kamihi.cli.commands.action","text":""},{"location":"reference/kamihi/cli/commands/action/#kamihi.cli.commands.action","title":"kamihi.cli.commands.action","text":"<p>Action-related commands for the Kamihi CLI.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>new</code> <p>Create a new action.</p>"},{"location":"reference/kamihi/cli/commands/action/#kamihi.cli.commands.action.new","title":"new","text":"<pre><code>new(\n    ctx: Context,\n    name: str = typer.Argument(\n        ..., help=\"Name of the new action.\"\n    ),\n    description: str = typer.Option(\n        \"\", help=\"Description of the new action.\"\n    ),\n) -&gt; None\n</code></pre> <p>Create a new action.</p> Source code in <code>src/kamihi/cli/commands/action.py</code> <pre><code>@app.command()\ndef new(\n    ctx: typer.Context,\n    name: str = typer.Argument(..., help=\"Name of the new action.\"),\n    description: str = typer.Option(\"\", help=\"Description of the new action.\"),\n) -&gt; None:\n    \"\"\"Create a new action.\"\"\"\n    run_copy(\n        \"gh:kamihi-org/kamihi-action-template\",\n        str(ctx.obj.project),\n        data={\n            \"action_name\": name,\n            \"action_description\": description,\n        },\n    )\n</code></pre>"},{"location":"reference/kamihi/cli/commands/init/","title":"kamihi.cli.commands.init","text":""},{"location":"reference/kamihi/cli/commands/init/#kamihi.cli.commands.init","title":"kamihi.cli.commands.init","text":"<p>Initialization of projects with Kamihi.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>init</code> <p>Initialize a new Kamihi project.</p>"},{"location":"reference/kamihi/cli/commands/init/#kamihi.cli.commands.init.init","title":"init","text":"<pre><code>init(\n    ctx: Context,\n    name: str = typer.Argument(\n        ..., help=\"Name of the project.\"\n    ),\n    path: Annotated[\n        Path | None,\n        Option(\n            exists=True,\n            file_okay=False,\n            dir_okay=True,\n            writable=True,\n            resolve_path=True,\n            help=\"Path to the project directory.\",\n        ),\n    ] = None,\n    description: str = typer.Option(\n        \"Kamihi project\", help=\"Description of the project.\"\n    ),\n) -&gt; None\n</code></pre> <p>Initialize a new Kamihi project.</p> Source code in <code>src/kamihi/cli/commands/init.py</code> <pre><code>@app.command()\ndef init(\n    ctx: typer.Context,\n    name: str = typer.Argument(..., help=\"Name of the project.\"),\n    path: Annotated[\n        Path | None,\n        typer.Option(\n            exists=True,\n            file_okay=False,\n            dir_okay=True,\n            writable=True,\n            resolve_path=True,\n            help=\"Path to the project directory.\",\n        ),\n    ] = None,\n    description: str = typer.Option(\n        \"Kamihi project\",\n        help=\"Description of the project.\",\n    ),\n) -&gt; None:\n    \"\"\"Initialize a new Kamihi project.\"\"\"\n    run_copy(\n        \"gh:kamihi-org/kamihi-project-template\",\n        str((path or ctx.obj.project) / name),\n        data={\n            \"project_name\": name,\n            \"project_description\": description,\n            \"kamihi_version\": kamihi_version,\n        },\n    )\n</code></pre>"},{"location":"reference/kamihi/cli/commands/run/","title":"kamihi.cli.commands.run","text":""},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run","title":"kamihi.cli.commands.run","text":"<p>Kamihi framework project execution.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>host_callback</code> <p>Ensure the host value is valid.</p> <code>import_actions</code> <p>Import all Python files from a specified directory.</p> <code>import_file</code> <p>Import a Python file from a specified path.</p> <code>import_models</code> <p>Import all Python files from a specified directory.</p> <code>run</code> <p>Run a project with the Kamihi framework.</p>"},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.host_callback","title":"host_callback","text":"<pre><code>host_callback(value: str | None) -&gt; str | None\n</code></pre> <p>Ensure the host value is valid.</p> <p>Parameters:</p> Name Type Description Default <code>str | None</code> <p>The host value.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: The validated host value.</p> Source code in <code>src/kamihi/cli/commands/run.py</code> <pre><code>def host_callback(\n    value: str | None,\n) -&gt; str | None:\n    \"\"\"\n    Ensure the host value is valid.\n\n    Args:\n        value (str | None): The host value.\n\n    Returns:\n        str | None: The validated host value.\n\n    \"\"\"\n    if value and isinstance(hostname(value, may_have_port=False), ValidationError):\n        raise typer.BadParameter(\"Invalid host value\")\n    return value\n</code></pre>"},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.host_callback(value)","title":"<code>value</code>","text":""},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.import_actions","title":"import_actions","text":"<pre><code>import_actions(actions_dir: Path) -&gt; None\n</code></pre> <p>Import all Python files from a specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The path to the directory containing Python files.</p> required Source code in <code>src/kamihi/cli/commands/run.py</code> <pre><code>def import_actions(actions_dir: Path) -&gt; None:\n    \"\"\"\n    Import all Python files from a specified directory.\n\n    Args:\n        actions_dir (str): The path to the directory containing Python files.\n\n    \"\"\"\n    if not actions_dir.is_dir():\n        logger.warning(\"No actions directory found.\")\n        return\n\n    logger.trace(f\"Scanning for actions in {actions_dir}\")\n\n    for action_dir in actions_dir.iterdir():\n        action_dir: Path\n        action_name = action_dir.name\n        lg = logger.bind(action=action_name)\n\n        if action_dir.is_dir() and action_dir.name != \"__pycache__\" and (action_dir / \"__init__.py\").exists():\n            action_file = action_dir / f\"{action_name}.py\"\n\n            if action_file.exists() and action_file.is_file():\n                lg.debug(f\"Importing action from {action_file}\")\n                import_file(action_file, f\"kamihi.actions.{action_name}\")\n            else:\n                lg.error(f\"Action directory found, but no '{action_name}.py' file exists.\")\n        elif action_dir.is_dir():\n            lg.error(\"Action directory found, but no '__init__.py' file exists.\")\n</code></pre>"},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.import_actions(actions_dir)","title":"<code>actions_dir</code>","text":""},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.import_file","title":"import_file","text":"<pre><code>import_file(path: Path, name: str) -&gt; None\n</code></pre> <p>Import a Python file from a specified path.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The path to the Python file.</p> required <code>str</code> <p>The name of the module.</p> required Source code in <code>src/kamihi/cli/commands/run.py</code> <pre><code>def import_file(path: Path, name: str) -&gt; None:\n    \"\"\"\n    Import a Python file from a specified path.\n\n    Args:\n        path (str): The path to the Python file.\n        name (str): The name of the module.\n\n    \"\"\"\n    spec = importlib.util.spec_from_file_location(name, str(path))\n    if spec is None:\n        logger.error(f\"Could not find spec for {name}\")\n        return\n\n    module = importlib.util.module_from_spec(spec)\n\n    sys.modules[name] = module\n\n    with logger.catch(message=\"Error loading module\"):\n        spec.loader.exec_module(module)\n</code></pre>"},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.import_file(path)","title":"<code>path</code>","text":""},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.import_file(name)","title":"<code>name</code>","text":""},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.import_models","title":"import_models","text":"<pre><code>import_models(models_dir: Path) -&gt; None\n</code></pre> <p>Import all Python files from a specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The path to the directory containing Python files.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>None</code> <p>True if models were imported successfully, False otherwise.</p> Source code in <code>src/kamihi/cli/commands/run.py</code> <pre><code>def import_models(models_dir: Path) -&gt; None:\n    \"\"\"\n    Import all Python files from a specified directory.\n\n    Args:\n        models_dir (str): The path to the directory containing Python files.\n\n    Returns:\n        bool: True if models were imported successfully, False otherwise.\n\n    \"\"\"\n    if not models_dir.is_dir():\n        logger.debug(\"No models directory found.\")\n        return\n\n    logger.trace(f\"Scanning for models in {models_dir}\")\n\n    for model_file in models_dir.iterdir():\n        model_file: Path\n        model_name = model_file.stem\n        lg = logger.bind(model=model_name)\n\n        if model_file.is_file() and model_file.suffix == \".py\":\n            lg.trace(f\"Importing model from {model_file}\")\n            import_file(model_file, f\"kamihi.models.{model_name}\")\n</code></pre>"},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.import_models(models_dir)","title":"<code>models_dir</code>","text":""},{"location":"reference/kamihi/cli/commands/run/#kamihi.cli.commands.run.run","title":"run","text":"<pre><code>run(\n    ctx: Context,\n    log_level: Annotated[\n        LogLevel | None,\n        Option(\n            --log - level,\n            -l,\n            help=\"Set the logging level for console loggers.\",\n            show_default=INFO,\n        ),\n    ] = None,\n    web_host: Annotated[\n        str | None,\n        Option(\n            ...,\n            --host,\n            -h,\n            help=\"Host of the admin web panel\",\n            callback=host_callback,\n            show_default=localhost,\n        ),\n    ] = None,\n    web_port: Annotated[\n        int | None,\n        Option(\n            ...,\n            --port,\n            -p,\n            help=\"Port of the admin web panel\",\n            min=1024,\n            max=65535,\n            show_default=4242,\n        ),\n    ] = None,\n) -&gt; None\n</code></pre> <p>Run a project with the Kamihi framework.</p> Source code in <code>src/kamihi/cli/commands/run.py</code> <pre><code>@app.command()\ndef run(\n    ctx: typer.Context,\n    log_level: Annotated[\n        LogLevel | None,\n        typer.Option(\n            \"--log-level\", \"-l\", help=\"Set the logging level for console loggers.\", show_default=LogLevel.INFO\n        ),\n    ] = None,\n    web_host: Annotated[\n        str | None,\n        typer.Option(\n            ..., \"--host\", \"-h\", help=\"Host of the admin web panel\", callback=host_callback, show_default=\"localhost\"\n        ),\n    ] = None,\n    web_port: Annotated[\n        int | None,\n        typer.Option(..., \"--port\", \"-p\", help=\"Port of the admin web panel\", min=1024, max=65535, show_default=\"4242\"),\n    ] = None,\n) -&gt; None:\n    \"\"\"Run a project with the Kamihi framework.\"\"\"\n    settings = KamihiSettings.from_yaml(ctx.obj.config) if ctx.obj.config is not None else KamihiSettings()\n    if web_host:\n        settings.web.host = web_host\n    if web_port:\n        settings.web.port = web_port\n    if log_level:\n        settings.log.stdout_level = log_level\n        settings.log.stderr_level = log_level\n        settings.log.file_level = log_level\n        settings.log.notification_level = log_level\n\n    bot = _init_bot(settings)\n\n    import_actions(ctx.obj.cwd / \"actions\")\n    import_models(ctx.obj.cwd / \"models\")\n\n    bot.start()\n</code></pre>"},{"location":"reference/kamihi/cli/commands/user/","title":"kamihi.cli.commands.user","text":""},{"location":"reference/kamihi/cli/commands/user/#kamihi.cli.commands.user","title":"kamihi.cli.commands.user","text":"<p>User management module for Kamihi CLI.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>add</code> <p>Add a new user.</p> <code>data_callback</code> <p>Parse a JSON string into a dictionary.</p> <code>onerror</code> <p>Handle errors during user validation.</p> <code>telegram_id_callback</code> <p>Validate the Telegram ID.</p>"},{"location":"reference/kamihi/cli/commands/user/#kamihi.cli.commands.user.add","title":"add","text":"<pre><code>add(\n    ctx: Context,\n    telegram_id: Annotated[\n        int,\n        Argument(\n            ...,\n            help=\"Telegram ID of the user\",\n            callback=telegram_id_callback,\n        ),\n    ],\n    is_admin: Annotated[\n        bool,\n        Option(--admin, -a, help=\"Is the user an admin?\"),\n    ] = False,\n    data: Annotated[\n        str | None,\n        Option(\n            --data,\n            -d,\n            help=\"Additional data for the user in JSON format. For use with custom user classes.\",\n            show_default=False,\n            callback=data_callback,\n        ),\n    ] = None,\n) -&gt; None\n</code></pre> <p>Add a new user.</p> Source code in <code>src/kamihi/cli/commands/user.py</code> <pre><code>@app.command()\ndef add(\n    ctx: typer.Context,\n    telegram_id: Annotated[int, typer.Argument(..., help=\"Telegram ID of the user\", callback=telegram_id_callback)],\n    is_admin: Annotated[bool, typer.Option(\"--admin\", \"-a\", help=\"Is the user an admin?\")] = False,  # noqa: FBT002\n    data: Annotated[\n        str | None,\n        typer.Option(\n            \"--data\",\n            \"-d\",\n            help=\"Additional data for the user in JSON format. For use with custom user classes.\",\n            show_default=False,\n            callback=data_callback,\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"Add a new user.\"\"\"\n    settings = KamihiSettings.from_yaml(ctx.obj.config) if ctx.obj.config else KamihiSettings()\n    settings.log.file_enable = False\n    settings.log.notification_enable = False\n    _init_bot(settings)\n\n    user_data = data or {}\n    user_data[\"telegram_id\"] = telegram_id\n    user_data[\"is_admin\"] = is_admin\n\n    lg = logger.bind(**user_data)\n\n    import_models(ctx.obj.cwd / \"models\")\n\n    if User.get_model() == User and data:\n        lg.warning(\"No custom user model found, ignoring extra data provided.\")\n        user_data = {\"telegram_id\": telegram_id, \"is_admin\": is_admin}\n\n    with lg.catch(FieldDoesNotExist, message=\"Custom user model does not have the field provided.\", onerror=onerror):\n        user = User.get_model()(**user_data)\n    with lg.catch(ValidationError, message=\"User inputted is not valid.\", onerror=onerror):\n        user.validate()\n        user.save()\n\n    lg.success(\"User added.\")\n</code></pre>"},{"location":"reference/kamihi/cli/commands/user/#kamihi.cli.commands.user.data_callback","title":"data_callback","text":"<pre><code>data_callback(data: str) -&gt; dict\n</code></pre> <p>Parse a JSON string into a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The JSON string to parse.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The parsed JSON data.</p> <p>Raises:</p> Type Description <code>BadParameter</code> <p>If the JSON string is invalid.</p> Source code in <code>src/kamihi/cli/commands/user.py</code> <pre><code>def data_callback(data: str) -&gt; dict:\n    \"\"\"\n    Parse a JSON string into a dictionary.\n\n    Args:\n        data (str): The JSON string to parse.\n\n    Returns:\n        dict: The parsed JSON data.\n\n    Raises:\n        typer.BadParameter: If the JSON string is invalid.\n\n    \"\"\"\n    if data:\n        try:\n            return json.loads(data)\n        except json.JSONDecodeError as e:\n            msg = f\"Invalid JSON data: {e}\"\n            raise typer.BadParameter(msg) from e\n    return {}\n</code></pre>"},{"location":"reference/kamihi/cli/commands/user/#kamihi.cli.commands.user.data_callback(data)","title":"<code>data</code>","text":""},{"location":"reference/kamihi/cli/commands/user/#kamihi.cli.commands.user.onerror","title":"onerror","text":"<pre><code>onerror(e: BaseException) -&gt; None\n</code></pre> <p>Handle errors during user validation.</p> <p>Parameters:</p> Name Type Description Default <code>Exception</code> <p>The exception raised during validation.</p> required Source code in <code>src/kamihi/cli/commands/user.py</code> <pre><code>def onerror(e: BaseException) -&gt; None:  # noqa: ARG001\n    \"\"\"\n    Handle errors during user validation.\n\n    Args:\n        e (Exception): The exception raised during validation.\n\n    \"\"\"\n    raise typer.Exit(1)\n</code></pre>"},{"location":"reference/kamihi/cli/commands/user/#kamihi.cli.commands.user.onerror(e)","title":"<code>e</code>","text":""},{"location":"reference/kamihi/cli/commands/user/#kamihi.cli.commands.user.telegram_id_callback","title":"telegram_id_callback","text":"<pre><code>telegram_id_callback(value: int) -&gt; int\n</code></pre> <p>Validate the Telegram ID.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>The Telegram ID to validate.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The validated Telegram ID.</p> <p>Raises:</p> Type Description <code>BadParameter</code> <p>If the Telegram ID is invalid.</p> Source code in <code>src/kamihi/cli/commands/user.py</code> <pre><code>def telegram_id_callback(value: int) -&gt; int:\n    \"\"\"\n    Validate the Telegram ID.\n\n    Args:\n        value (int): The Telegram ID to validate.\n\n    Returns:\n        int: The validated Telegram ID.\n\n    Raises:\n        typer.BadParameter: If the Telegram ID is invalid.\n\n    \"\"\"\n    if not isinstance(value, int) or value &lt;= 0 or len(str(value)) &gt; 16:\n        msg = \"Must be a positive integer with up to 16 digits.\"\n        raise typer.BadParameter(msg)\n    return value\n</code></pre>"},{"location":"reference/kamihi/cli/commands/user/#kamihi.cli.commands.user.telegram_id_callback(value)","title":"<code>value</code>","text":""},{"location":"reference/kamihi/cli/commands/version/","title":"kamihi.cli.commands.version","text":""},{"location":"reference/kamihi/cli/commands/version/#kamihi.cli.commands.version","title":"kamihi.cli.commands.version","text":"<p>Version command for the Kamihi CLI.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>version</code> <p>Print the version and exit.</p>"},{"location":"reference/kamihi/cli/commands/version/#kamihi.cli.commands.version.version","title":"version","text":"<pre><code>version() -&gt; None\n</code></pre> <p>Print the version and exit.</p> Source code in <code>src/kamihi/cli/commands/version.py</code> <pre><code>@app.command()\ndef version() -&gt; None:\n    \"\"\"Print the version and exit.\"\"\"\n    from kamihi import __version__\n\n    print(__version__)  # noqa: T201\n</code></pre>"},{"location":"reference/kamihi/db/","title":"kamihi.db","text":""},{"location":"reference/kamihi/db/#kamihi.db","title":"kamihi.db","text":"<p>Database connections module for the Kamihi framework.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>mongo</code> <p>Connection management to MongoDB using MongoEngine.</p>"},{"location":"reference/kamihi/db/mongo/","title":"kamihi.db.mongo","text":""},{"location":"reference/kamihi/db/mongo/#kamihi.db.mongo","title":"kamihi.db.mongo","text":"<p>Connection management to MongoDB using MongoEngine.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>connect</code> <p>Connect to the MongoDB database.</p> <code>disconnect</code> <p>Disconnect from the MongoDB database.</p>"},{"location":"reference/kamihi/db/mongo/#kamihi.db.mongo.connect","title":"connect","text":"<pre><code>connect(settings: DatabaseSettings) -&gt; None\n</code></pre> <p>Connect to the MongoDB database.</p> <p>This function establishes a connection to the MongoDB database using the configuration settings defined in the Kamihi settings module.</p> <p>Parameters:</p> Name Type Description Default <code>DatabaseSettings</code> <p>The database settings for the connection</p> required Source code in <code>src/kamihi/db/mongo.py</code> <pre><code>def connect(settings: DatabaseSettings) -&gt; None:\n    \"\"\"\n    Connect to the MongoDB database.\n\n    This function establishes a connection to the MongoDB database using the\n    configuration settings defined in the Kamihi settings module.\n\n    Args:\n        settings (DatabaseSettings): The database settings for the connection\n\n    \"\"\"\n    mongo_connect(\n        host=settings.host + \"/\" + settings.name,\n        alias=\"default\",\n    )\n</code></pre>"},{"location":"reference/kamihi/db/mongo/#kamihi.db.mongo.connect(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/db/mongo/#kamihi.db.mongo.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre> <p>Disconnect from the MongoDB database.</p> Source code in <code>src/kamihi/db/mongo.py</code> <pre><code>def disconnect() -&gt; None:\n    \"\"\"Disconnect from the MongoDB database.\"\"\"\n    mongo_disconnect(alias=\"default\")\n</code></pre>"},{"location":"reference/kamihi/tg/","title":"kamihi.tg","text":""},{"location":"reference/kamihi/tg/#kamihi.tg","title":"kamihi.tg","text":"<p>Telegram module for Kamihi.</p> <p>This module provides the communication with the Telegram API</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>client</code> <p>Telegram client module.</p> <code>default_handlers</code> <p>Default handlers.</p> <code>handlers</code> <p>Custom handlers for the Kamihi framework using python-telegram-bot.</p> <code>media</code> <p>Media types for the Kamihi bot.</p> <code>send</code> <p>Send functions for Telegram.</p> <p>Classes:</p> Name Description <code>TelegramClient</code> <p>Telegram client class.</p>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient","title":"TelegramClient","text":"<pre><code>TelegramClient(\n    settings: KamihiSettings, handlers: list[BaseHandler]\n)\n</code></pre> <p>Telegram client class.</p> <p>This class provides methods to send messages and handle commands.</p> <p>Initialize the Telegram client.</p> <p>Parameters:</p> Name Type Description Default <code>KamihiSettings</code> <p>The settings object.</p> required <code>list[BaseHandler]</code> <p>List of handlers to register.</p> required <p>Methods:</p> Name Description <code>register_run_once_job</code> <p>Add a job to run once.</p> <code>reset_scopes</code> <p>Reset the command scopes for the bot.</p> <code>run</code> <p>Run the Telegram bot.</p> <code>set_scopes</code> <p>Set the command scopes for the bot.</p> <code>stop</code> <p>Stop the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def __init__(self, settings: KamihiSettings, handlers: list[BaseHandler]) -&gt; None:\n    \"\"\"\n    Initialize the Telegram client.\n\n    Args:\n        settings (KamihiSettings): The settings object.\n        handlers (list[BaseHandler]): List of handlers to register.\n\n    \"\"\"\n    self._bot_settings = settings\n\n    if self._bot_settings.testing:\n        self._base_url = \"https://api.telegram.org/bot{token}/test\"\n\n    # Set up the application with all the settings\n    self._builder = Application.builder()\n    self._builder.base_url(self._base_url)\n    self._builder.token(settings.token)\n    self._builder.defaults(\n        Defaults(\n            tzinfo=settings.timezone_obj,\n            parse_mode=ParseMode.MARKDOWN_V2,\n        )\n    )\n    self._builder.post_init(_post_init)\n    self._builder.post_shutdown(_post_shutdown)\n    self._builder.persistence(DictPersistence(bot_data_json=settings.model_dump_json()))\n\n    # Build the application\n    self._app: Application = self._builder.build()\n\n    # Register the handlers\n    for handler in handlers:\n        with logger.catch(exception=TelegramError, message=\"Failed to register handler\"):\n            self._app.add_handler(handler)\n\n    # Register the default handlers\n    if settings.responses.default_enabled:\n        self._app.add_handler(MessageHandler(filters.TEXT, default), group=1000)\n    self._app.add_error_handler(error)\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient(handlers)","title":"<code>handlers</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.register_run_once_job","title":"register_run_once_job","text":"<pre><code>register_run_once_job(\n    callback: callable, when: int\n) -&gt; None\n</code></pre> <p>Add a job to run once.</p> <p>Parameters:</p> Name Type Description Default <code>callable</code> <p>The callback function to run.</p> required <code>int</code> <p>second from now to run the job.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def register_run_once_job(self, callback: callable, when: int) -&gt; None:\n    \"\"\"\n    Add a job to run once.\n\n    Args:\n        callback (callable): The callback function to run.\n        when (int): second from now to run the job.\n\n    \"\"\"\n    self._app.job_queue.run_once(callback, when)\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.register_run_once_job(callback)","title":"<code>callback</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.register_run_once_job(when)","title":"<code>when</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.reset_scopes","title":"reset_scopes  <code>async</code>","text":"<pre><code>reset_scopes(context: CallbackContext) -&gt; None\n</code></pre> <p>Reset the command scopes for the bot.</p> <p>This method clears all command scopes and sets the default commands.</p> <p>Parameters:</p> Name Type Description Default <code>CallbackContext</code> <p>The context of the callback. Not used but required for this function to be registered as a job.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def reset_scopes(self, context: CallbackContext) -&gt; None:  # noqa: ARG002\n    \"\"\"\n    Reset the command scopes for the bot.\n\n    This method clears all command scopes and sets the default commands.\n\n    Args:\n        context (CallbackContext): The context of the callback. Not used but required for\n            this function to be registered as a job.\n\n    \"\"\"\n    if self._bot_settings.testing:\n        logger.debug(\"Testing mode, skipping resetting scopes\")\n        return\n\n    with logger.catch(exception=TelegramError, message=\"Failed to reset scopes\"):\n        await self._app.bot.set_my_commands(commands=[])\n        logger.debug(\"Scopes erased\")\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.reset_scopes(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the Telegram bot.\"\"\"\n    logger.trace(\"Starting main loop...\")\n    self._app.run_polling(allowed_updates=Update.ALL_TYPES)\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.set_scopes","title":"set_scopes  <code>async</code>","text":"<pre><code>set_scopes(scopes: dict[int, list[BotCommand]]) -&gt; None\n</code></pre> <p>Set the command scopes for the bot.</p> <p>Parameters:</p> Name Type Description Default <code>dict[int, list[BotCommand]]</code> <p>The command scopes to set.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def set_scopes(self, scopes: dict[int, list[BotCommand]]) -&gt; None:\n    \"\"\"\n    Set the command scopes for the bot.\n\n    Args:\n        scopes (dict[int, list[BotCommand]]): The command scopes to set.\n\n    \"\"\"\n    if self._bot_settings.testing:\n        logger.debug(\"Testing mode, skipping setting scopes\")\n        return\n\n    for user_id, commands in scopes.items():\n        lg = logger.bind(user_id=user_id, commands=[command.command for command in commands])\n        with lg.catch(\n            exception=TelegramError,\n            message=\"Failed to set scopes for user {user_id}\",\n        ):\n            await self._app.bot.set_my_commands(\n                commands=commands,\n                scope=BotCommandScopeChat(user_id),\n            )\n            lg.debug(\"Scopes set\")\n</code></pre>"},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.set_scopes(scopes)","title":"<code>scopes</code>","text":""},{"location":"reference/kamihi/tg/#kamihi.tg.TelegramClient.stop","title":"stop  <code>async</code>","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def stop(self) -&gt; None:\n    \"\"\"Stop the Telegram bot.\"\"\"\n    logger.trace(\"Stopping main loop...\")\n    await self._app.stop()\n</code></pre>"},{"location":"reference/kamihi/tg/client/","title":"kamihi.tg.client","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client","title":"kamihi.tg.client","text":"<p>Telegram client module.</p> <p>This module provides a Telegram client for sending messages and handling commands.</p> License <p>MIT</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kamihi.tg.client import TelegramClient\n&gt;&gt;&gt; from kamihi.base.config import KamihiSettings\n&gt;&gt;&gt; client = TelegramClient(KamihiSettings(), [])\n&gt;&gt;&gt; client.run()\n</code></pre> <p>Classes:</p> Name Description <code>TelegramClient</code> <p>Telegram client class.</p>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient","title":"TelegramClient","text":"<pre><code>TelegramClient(\n    settings: KamihiSettings, handlers: list[BaseHandler]\n)\n</code></pre> <p>Telegram client class.</p> <p>This class provides methods to send messages and handle commands.</p> <p>Initialize the Telegram client.</p> <p>Parameters:</p> Name Type Description Default <code>KamihiSettings</code> <p>The settings object.</p> required <code>list[BaseHandler]</code> <p>List of handlers to register.</p> required <p>Methods:</p> Name Description <code>register_run_once_job</code> <p>Add a job to run once.</p> <code>reset_scopes</code> <p>Reset the command scopes for the bot.</p> <code>run</code> <p>Run the Telegram bot.</p> <code>set_scopes</code> <p>Set the command scopes for the bot.</p> <code>stop</code> <p>Stop the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def __init__(self, settings: KamihiSettings, handlers: list[BaseHandler]) -&gt; None:\n    \"\"\"\n    Initialize the Telegram client.\n\n    Args:\n        settings (KamihiSettings): The settings object.\n        handlers (list[BaseHandler]): List of handlers to register.\n\n    \"\"\"\n    self._bot_settings = settings\n\n    if self._bot_settings.testing:\n        self._base_url = \"https://api.telegram.org/bot{token}/test\"\n\n    # Set up the application with all the settings\n    self._builder = Application.builder()\n    self._builder.base_url(self._base_url)\n    self._builder.token(settings.token)\n    self._builder.defaults(\n        Defaults(\n            tzinfo=settings.timezone_obj,\n            parse_mode=ParseMode.MARKDOWN_V2,\n        )\n    )\n    self._builder.post_init(_post_init)\n    self._builder.post_shutdown(_post_shutdown)\n    self._builder.persistence(DictPersistence(bot_data_json=settings.model_dump_json()))\n\n    # Build the application\n    self._app: Application = self._builder.build()\n\n    # Register the handlers\n    for handler in handlers:\n        with logger.catch(exception=TelegramError, message=\"Failed to register handler\"):\n            self._app.add_handler(handler)\n\n    # Register the default handlers\n    if settings.responses.default_enabled:\n        self._app.add_handler(MessageHandler(filters.TEXT, default), group=1000)\n    self._app.add_error_handler(error)\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient(settings)","title":"<code>settings</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient(handlers)","title":"<code>handlers</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.register_run_once_job","title":"register_run_once_job","text":"<pre><code>register_run_once_job(\n    callback: callable, when: int\n) -&gt; None\n</code></pre> <p>Add a job to run once.</p> <p>Parameters:</p> Name Type Description Default <code>callable</code> <p>The callback function to run.</p> required <code>int</code> <p>second from now to run the job.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def register_run_once_job(self, callback: callable, when: int) -&gt; None:\n    \"\"\"\n    Add a job to run once.\n\n    Args:\n        callback (callable): The callback function to run.\n        when (int): second from now to run the job.\n\n    \"\"\"\n    self._app.job_queue.run_once(callback, when)\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.register_run_once_job(callback)","title":"<code>callback</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.register_run_once_job(when)","title":"<code>when</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.reset_scopes","title":"reset_scopes  <code>async</code>","text":"<pre><code>reset_scopes(context: CallbackContext) -&gt; None\n</code></pre> <p>Reset the command scopes for the bot.</p> <p>This method clears all command scopes and sets the default commands.</p> <p>Parameters:</p> Name Type Description Default <code>CallbackContext</code> <p>The context of the callback. Not used but required for this function to be registered as a job.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def reset_scopes(self, context: CallbackContext) -&gt; None:  # noqa: ARG002\n    \"\"\"\n    Reset the command scopes for the bot.\n\n    This method clears all command scopes and sets the default commands.\n\n    Args:\n        context (CallbackContext): The context of the callback. Not used but required for\n            this function to be registered as a job.\n\n    \"\"\"\n    if self._bot_settings.testing:\n        logger.debug(\"Testing mode, skipping resetting scopes\")\n        return\n\n    with logger.catch(exception=TelegramError, message=\"Failed to reset scopes\"):\n        await self._app.bot.set_my_commands(commands=[])\n        logger.debug(\"Scopes erased\")\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.reset_scopes(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the Telegram bot.\"\"\"\n    logger.trace(\"Starting main loop...\")\n    self._app.run_polling(allowed_updates=Update.ALL_TYPES)\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.set_scopes","title":"set_scopes  <code>async</code>","text":"<pre><code>set_scopes(scopes: dict[int, list[BotCommand]]) -&gt; None\n</code></pre> <p>Set the command scopes for the bot.</p> <p>Parameters:</p> Name Type Description Default <code>dict[int, list[BotCommand]]</code> <p>The command scopes to set.</p> required Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def set_scopes(self, scopes: dict[int, list[BotCommand]]) -&gt; None:\n    \"\"\"\n    Set the command scopes for the bot.\n\n    Args:\n        scopes (dict[int, list[BotCommand]]): The command scopes to set.\n\n    \"\"\"\n    if self._bot_settings.testing:\n        logger.debug(\"Testing mode, skipping setting scopes\")\n        return\n\n    for user_id, commands in scopes.items():\n        lg = logger.bind(user_id=user_id, commands=[command.command for command in commands])\n        with lg.catch(\n            exception=TelegramError,\n            message=\"Failed to set scopes for user {user_id}\",\n        ):\n            await self._app.bot.set_my_commands(\n                commands=commands,\n                scope=BotCommandScopeChat(user_id),\n            )\n            lg.debug(\"Scopes set\")\n</code></pre>"},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.set_scopes(scopes)","title":"<code>scopes</code>","text":""},{"location":"reference/kamihi/tg/client/#kamihi.tg.client.TelegramClient.stop","title":"stop  <code>async</code>","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop the Telegram bot.</p> Source code in <code>src/kamihi/tg/client.py</code> <pre><code>async def stop(self) -&gt; None:\n    \"\"\"Stop the Telegram bot.\"\"\"\n    logger.trace(\"Stopping main loop...\")\n    await self._app.stop()\n</code></pre>"},{"location":"reference/kamihi/tg/default_handlers/","title":"kamihi.tg.default_handlers","text":""},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers","title":"kamihi.tg.default_handlers","text":"<p>Default handlers.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>default</code> <p>Tells the user their message is not understood.</p> <code>error</code> <p>Apologizes to the user when an error happens.</p>"},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.default","title":"default  <code>async</code>","text":"<pre><code>default(update: Update, context: CallbackContext) -&gt; None\n</code></pre> <p>Tells the user their message is not understood.</p> <p>Parameters:</p> Name Type Description Default <code>Update</code> <p>Update object</p> required <code>CallbackContext</code> <p>CallbackContext object</p> required Source code in <code>src/kamihi/tg/default_handlers.py</code> <pre><code>async def default(update: Update, context: CallbackContext) -&gt; None:\n    \"\"\"\n    Tells the user their message is not understood.\n\n    Args:\n        update (Update): Update object\n        context (CallbackContext): CallbackContext object\n\n    \"\"\"\n    logger.bind(chat_id=update.effective_message.chat_id, message_id=update.effective_message.message_id).debug(\n        \"Received message but no handler matched, so sending default response\"\n    )\n\n    text = context.bot_data[\"responses\"][\"default_message\"]\n    await send(text, update=update, context=context)\n    raise ApplicationHandlerStop\n</code></pre>"},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.default(update)","title":"<code>update</code>","text":""},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.default(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.error","title":"error  <code>async</code>","text":"<pre><code>error(\n    update: object | None, context: CallbackContext\n) -&gt; None\n</code></pre> <p>Apologizes to the user when an error happens.</p> <p>Parameters:</p> Name Type Description Default <code>Update</code> <p>Update object</p> required <code>CallbackContext</code> <p>CallbackContext object</p> required Source code in <code>src/kamihi/tg/default_handlers.py</code> <pre><code>async def error(update: object | None, context: CallbackContext) -&gt; None:\n    \"\"\"\n    Apologizes to the user when an error happens.\n\n    Args:\n        update (Update): Update object\n        context (CallbackContext): CallbackContext object\n\n    \"\"\"\n    logger.opt(exception=context.error).error(\"An error occurred\")\n\n    if isinstance(update, Update):\n        text = context.bot_data[\"responses\"][\"error_message\"]\n        await send(text, update=update, context=context)\n\n    raise ApplicationHandlerStop\n</code></pre>"},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.error(update)","title":"<code>update</code>","text":""},{"location":"reference/kamihi/tg/default_handlers/#kamihi.tg.default_handlers.error(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/tg/handlers/","title":"kamihi.tg.handlers","text":""},{"location":"reference/kamihi/tg/handlers/#kamihi.tg.handlers","title":"kamihi.tg.handlers","text":"<p>Custom handlers for the Kamihi framework using python-telegram-bot.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>auth_handler</code> <p>Custom handler for Telegram bot that checks if a user is authorized to use a wrapped handler.</p> <p>Classes:</p> Name Description <code>AuthHandler</code> <p>Custom wrapper handler that checks if the user is authorized to use the wrapped handler before executing it.</p>"},{"location":"reference/kamihi/tg/handlers/#kamihi.tg.handlers.AuthHandler","title":"AuthHandler","text":"<pre><code>AuthHandler(handler: BaseHandler, name: str)\n</code></pre> <p>               Bases: <code>BaseHandler</code></p> <p>Custom wrapper handler that checks if the user is authorized to use the wrapped handler before executing it.</p> <p>Attributes:</p> Name Type Description <code>handler</code> <code>BaseHandler</code> <p>the handler to be wrapped.</p> <code>name</code> <code>str</code> <p>The name of the action.</p> <p>Initialize the AuthHandler with the callback function.</p> <p>Methods:</p> Name Description <code>check_update</code> <p>Determine if an update should be handled by this handler instance.</p> Source code in <code>src/kamihi/tg/handlers/auth_handler.py</code> <pre><code>def __init__(self, handler: BaseHandler, name: str) -&gt; None:\n    \"\"\"Initialize the AuthHandler with the callback function.\"\"\"\n    self.handler = handler\n    self.name = name\n    super().__init__(self.handler.callback)\n</code></pre>"},{"location":"reference/kamihi/tg/handlers/#kamihi.tg.handlers.AuthHandler.check_update","title":"check_update","text":"<pre><code>check_update(update: Update) -&gt; bool\n</code></pre> <p>Determine if an update should be handled by this handler instance.</p> Source code in <code>src/kamihi/tg/handlers/auth_handler.py</code> <pre><code>def check_update(self, update: Update) -&gt; bool:\n    \"\"\"Determine if an update should be handled by this handler instance.\"\"\"\n    if not isinstance(update, Update):\n        return False\n\n    if update.message and update.effective_user:\n        user = get_user_from_telegram_id(update.effective_user.id)\n\n        if user is None:\n            logger.bind(user_id=update.effective_user.id, action=self.name).debug(\n                \"User not found in the database tried to use action.\"\n            )\n            return False\n\n        if not is_user_authorized(user, self.name):\n            logger.bind(user_id=user.telegram_id, action=self.name).debug(\n                \"User is not authorized to use this action.\"\n            )\n            return False\n\n    return self.handler.check_update(update)\n</code></pre>"},{"location":"reference/kamihi/tg/handlers/auth_handler/","title":"kamihi.tg.handlers.auth_handler","text":""},{"location":"reference/kamihi/tg/handlers/auth_handler/#kamihi.tg.handlers.auth_handler","title":"kamihi.tg.handlers.auth_handler","text":"<p>Custom handler for Telegram bot that checks if a user is authorized to use a wrapped handler.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>AuthHandler</code> <p>Custom wrapper handler that checks if the user is authorized to use the wrapped handler before executing it.</p>"},{"location":"reference/kamihi/tg/handlers/auth_handler/#kamihi.tg.handlers.auth_handler.AuthHandler","title":"AuthHandler","text":"<pre><code>AuthHandler(handler: BaseHandler, name: str)\n</code></pre> <p>               Bases: <code>BaseHandler</code></p> <p>Custom wrapper handler that checks if the user is authorized to use the wrapped handler before executing it.</p> <p>Attributes:</p> Name Type Description <code>handler</code> <code>BaseHandler</code> <p>the handler to be wrapped.</p> <code>name</code> <code>str</code> <p>The name of the action.</p> <p>Initialize the AuthHandler with the callback function.</p> <p>Methods:</p> Name Description <code>check_update</code> <p>Determine if an update should be handled by this handler instance.</p> Source code in <code>src/kamihi/tg/handlers/auth_handler.py</code> <pre><code>def __init__(self, handler: BaseHandler, name: str) -&gt; None:\n    \"\"\"Initialize the AuthHandler with the callback function.\"\"\"\n    self.handler = handler\n    self.name = name\n    super().__init__(self.handler.callback)\n</code></pre>"},{"location":"reference/kamihi/tg/handlers/auth_handler/#kamihi.tg.handlers.auth_handler.AuthHandler.check_update","title":"check_update","text":"<pre><code>check_update(update: Update) -&gt; bool\n</code></pre> <p>Determine if an update should be handled by this handler instance.</p> Source code in <code>src/kamihi/tg/handlers/auth_handler.py</code> <pre><code>def check_update(self, update: Update) -&gt; bool:\n    \"\"\"Determine if an update should be handled by this handler instance.\"\"\"\n    if not isinstance(update, Update):\n        return False\n\n    if update.message and update.effective_user:\n        user = get_user_from_telegram_id(update.effective_user.id)\n\n        if user is None:\n            logger.bind(user_id=update.effective_user.id, action=self.name).debug(\n                \"User not found in the database tried to use action.\"\n            )\n            return False\n\n        if not is_user_authorized(user, self.name):\n            logger.bind(user_id=user.telegram_id, action=self.name).debug(\n                \"User is not authorized to use this action.\"\n            )\n            return False\n\n    return self.handler.check_update(update)\n</code></pre>"},{"location":"reference/kamihi/tg/media/","title":"kamihi.tg.media","text":""},{"location":"reference/kamihi/tg/media/#kamihi.tg.media","title":"kamihi.tg.media","text":"<p>Media types for the Kamihi bot.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>Audio</code> <p>Represents an audio media type.</p> <code>Document</code> <p>Represents a document media type.</p> <code>Location</code> <p>Represents a location media type.</p> <code>Media</code> <p>Represents a media type for the Kamihi bot.</p> <code>Photo</code> <p>Represents a photo media type.</p> <code>Video</code> <p>Represents a video media type.</p> <code>Voice</code> <p>Represents a voice media type.</p>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Audio","title":"Audio  <code>dataclass</code>","text":"<pre><code>Audio(\n    file: str | Path | IO[bytes] | bytes,\n    caption: str | None = None,\n    filename: str | None = None,\n    _size_limit: float = float(\n        FileSizeLimit.FILESIZE_UPLOAD\n    ),\n    performer: str | None = None,\n    title: str | None = None,\n)\n</code></pre> <p>               Bases: <code>Media</code></p> <p>Represents an audio media type.</p> <p>Methods:</p> Name Description <code>as_input_media</code> <p>Convert the Audio to the InputMediaDocument class for sending.</p>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Audio.as_input_media","title":"as_input_media","text":"<pre><code>as_input_media() -&gt; InputMediaAudio\n</code></pre> <p>Convert the Audio to the InputMediaDocument class for sending.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>InputMediaAudio</code> <p>A dictionary representation of the audio for input media.</p> Source code in <code>src/kamihi/tg/media.py</code> <pre><code>def as_input_media(self) -&gt; InputMediaAudio:\n    \"\"\"\n    Convert the Audio to the InputMediaDocument class for sending.\n\n    Returns:\n        dict: A dictionary representation of the audio for input media.\n\n    \"\"\"\n    return InputMediaAudio(\n        media=self.file.read_bytes() if isinstance(self.file, Path) else self.file,\n        caption=md(self.caption) if self.caption else None,\n        filename=self.filename,\n        performer=self.performer,\n        title=self.title,\n    )\n</code></pre>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Document","title":"Document  <code>dataclass</code>","text":"<pre><code>Document(\n    file: str | Path | IO[bytes] | bytes,\n    caption: str | None = None,\n    filename: str | None = None,\n    _size_limit: float = float(\n        FileSizeLimit.FILESIZE_UPLOAD\n    ),\n)\n</code></pre> <p>               Bases: <code>Media</code></p> <p>Represents a document media type.</p> <p>Methods:</p> Name Description <code>as_input_media</code> <p>Convert the Document to the InputMediaDocument class for sending.</p>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Document.as_input_media","title":"as_input_media","text":"<pre><code>as_input_media() -&gt; InputMediaDocument\n</code></pre> <p>Convert the Document to the InputMediaDocument class for sending.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>InputMediaDocument</code> <p>A dictionary representation of the document for input media.</p> Source code in <code>src/kamihi/tg/media.py</code> <pre><code>def as_input_media(self) -&gt; InputMediaDocument:\n    \"\"\"\n    Convert the Document to the InputMediaDocument class for sending.\n\n    Returns:\n        dict: A dictionary representation of the document for input media.\n\n    \"\"\"\n    return InputMediaDocument(\n        media=self.file.read_bytes() if isinstance(self.file, Path) else self.file,\n        caption=md(self.caption) if self.caption else None,\n        filename=self.filename,\n    )\n</code></pre>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Location","title":"Location","text":"<pre><code>Location(\n    latitude: float,\n    longitude: float,\n    horizontal_accuracy: float | None = None,\n)\n</code></pre> <p>Represents a location media type.</p> <p>Attributes:</p> Name Type Description <code>latitude</code> <code>float</code> <p>Latitude of the location, must be between -90 and 90.</p> <code>longitude</code> <code>float</code> <p>Longitude of the location, must be between -180 and 180.</p> <code>horizontal_accuracy</code> <code>float | None</code> <p>Optional horizontal accuracy in meters.</p> <p>Initialize a Location instance with validated coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>float</code> <p>Latitude of the location (-90 to 90).</p> required <code>float</code> <p>Longitude of the location (-180 to 180).</p> required <code>float | None</code> <p>Optional horizontal accuracy in meters.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If latitude or longitude values are out of valid range.</p> Source code in <code>src/kamihi/tg/media.py</code> <pre><code>def __init__(self, latitude: float, longitude: float, horizontal_accuracy: float | None = None) -&gt; None:\n    \"\"\"\n    Initialize a Location instance with validated coordinates.\n\n    Args:\n        latitude (float): Latitude of the location (-90 to 90).\n        longitude (float): Longitude of the location (-180 to 180).\n        horizontal_accuracy (float | None): Optional horizontal accuracy in meters.\n\n\n    Raises:\n        ValueError: If latitude or longitude values are out of valid range.\n\n    \"\"\"\n    if not -90 &lt;= latitude &lt;= 90:\n        msg = f\"Latitude must be between -90 and 90, got {latitude}\"\n        raise ValueError(msg)\n    if not -180 &lt;= longitude &lt;= 180:\n        msg = f\"Longitude must be between -180 and 180, got {longitude}\"\n        raise ValueError(msg)\n    if horizontal_accuracy and not 0.0 &lt;= horizontal_accuracy &lt;= float(LocationLimit.HORIZONTAL_ACCURACY):\n        msg = (\n            f\"Horizontal accuracy must be between 0 \"\n            f\"and {LocationLimit.HORIZONTAL_ACCURACY}, got {horizontal_accuracy}\"\n        )\n        raise ValueError(msg)\n\n    self.latitude = latitude\n    self.longitude = longitude\n    self.horizontal_accuracy = horizontal_accuracy\n</code></pre>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Location(latitude)","title":"<code>latitude</code>","text":""},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Location(longitude)","title":"<code>longitude</code>","text":""},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Location(horizontal_accuracy)","title":"<code>horizontal_accuracy</code>","text":""},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Media","title":"Media  <code>dataclass</code>","text":"<pre><code>Media(\n    file: str | Path | IO[bytes] | bytes,\n    caption: str | None = None,\n    filename: str | None = None,\n    _size_limit: float = float(\n        FileSizeLimit.FILESIZE_UPLOAD\n    ),\n)\n</code></pre> <p>Represents a media type for the Kamihi bot.</p> <p>This is a base class for different media types like Photo and Document.</p> <p>Attributes:</p> Name Type Description <code>file</code> <code>str | Path | IO[bytes] | bytes</code> <p>The path to the media file or the file-like object.</p> <code>caption</code> <code>str | None</code> <p>Optional caption for the media.</p>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Photo","title":"Photo  <code>dataclass</code>","text":"<pre><code>Photo(\n    file: str | Path | IO[bytes] | bytes,\n    caption: str | None = None,\n    filename: str | None = None,\n    _size_limit: float = float(\n        FileSizeLimit.FILESIZE_UPLOAD\n    ),\n)\n</code></pre> <p>               Bases: <code>Media</code></p> <p>Represents a photo media type.</p> <p>Methods:</p> Name Description <code>as_input_media</code> <p>Convert the Photo to the InputMediaDocument class for sending.</p>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Photo.as_input_media","title":"as_input_media","text":"<pre><code>as_input_media() -&gt; InputMediaPhoto\n</code></pre> <p>Convert the Photo to the InputMediaDocument class for sending.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>InputMediaPhoto</code> <p>A dictionary representation of the photo for input media.</p> Source code in <code>src/kamihi/tg/media.py</code> <pre><code>def as_input_media(self) -&gt; InputMediaPhoto:\n    \"\"\"\n    Convert the Photo to the InputMediaDocument class for sending.\n\n    Returns:\n        dict: A dictionary representation of the photo for input media.\n\n    \"\"\"\n    return InputMediaPhoto(\n        media=self.file.read_bytes() if isinstance(self.file, Path) else self.file,\n        caption=md(self.caption) if self.caption else None,\n        filename=self.filename,\n    )\n</code></pre>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Video","title":"Video  <code>dataclass</code>","text":"<pre><code>Video(\n    file: str | Path | IO[bytes] | bytes,\n    caption: str | None = None,\n    filename: str | None = None,\n    _size_limit: float = float(\n        FileSizeLimit.FILESIZE_UPLOAD\n    ),\n)\n</code></pre> <p>               Bases: <code>Media</code></p> <p>Represents a video media type.</p> <p>Methods:</p> Name Description <code>as_input_media</code> <p>Convert the Video to the InputMediaDocument class for sending.</p>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Video.as_input_media","title":"as_input_media","text":"<pre><code>as_input_media() -&gt; InputMediaVideo\n</code></pre> <p>Convert the Video to the InputMediaDocument class for sending.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>InputMediaVideo</code> <p>A dictionary representation of the video for input media.</p> Source code in <code>src/kamihi/tg/media.py</code> <pre><code>def as_input_media(self) -&gt; InputMediaVideo:\n    \"\"\"\n    Convert the Video to the InputMediaDocument class for sending.\n\n    Returns:\n        dict: A dictionary representation of the video for input media.\n\n    \"\"\"\n    return InputMediaVideo(\n        media=self.file.read_bytes() if isinstance(self.file, Path) else self.file,\n        caption=md(self.caption) if self.caption else None,\n        filename=self.filename,\n    )\n</code></pre>"},{"location":"reference/kamihi/tg/media/#kamihi.tg.media.Voice","title":"Voice  <code>dataclass</code>","text":"<pre><code>Voice(\n    file: str | Path | IO[bytes] | bytes,\n    caption: str | None = None,\n    filename: str | None = None,\n    _size_limit: float = float(\n        FileSizeLimit.FILESIZE_UPLOAD\n    ),\n)\n</code></pre> <p>               Bases: <code>Media</code></p> <p>Represents a voice media type.</p>"},{"location":"reference/kamihi/tg/send/","title":"kamihi.tg.send","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send","title":"kamihi.tg.send","text":"<p>Send functions for Telegram.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>guess_media_type</code> <p>Guess the media type of a file based on its MIME type.</p> <code>send</code> <p>Send a message based on the provided object and annotation.</p>"},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.guess_media_type","title":"guess_media_type","text":"<pre><code>guess_media_type(\n    file: Path | bytes | BufferedReader, lg: Logger\n) -&gt; Media\n</code></pre> <p>Guess the media type of a file based on its MIME type.</p> <p>Parameters:</p> Name Type Description Default <code>Path | bytes | BufferedReader</code> <p>The file path to check.</p> required <code>Logger</code> <p>The logger instance to use for logging.</p> required <p>Returns:</p> Name Type Description <code>Media</code> <code>Media</code> <p>An instance of Media subclass based on the file type.</p> Source code in <code>src/kamihi/tg/send.py</code> <pre><code>def guess_media_type(file: Path | bytes | BufferedReader, lg: Logger) -&gt; Media:\n    \"\"\"\n    Guess the media type of a file based on its MIME type.\n\n    Args:\n        file (Path | bytes | BufferedReader): The file path to check.\n        lg (Logger): The logger instance to use for logging.\n\n    Returns:\n        Media: An instance of Media subclass based on the file type.\n\n    \"\"\"\n    with lg.catch(exception=magic.MagicException, message=\"Failed to get MIME type\", reraise=True):\n        if isinstance(file, bytes):\n            mimetype = magic.from_buffer(file, mime=True)\n        elif isinstance(file, BufferedReader):\n            file.seek(0)\n            mimetype = magic.from_buffer(file.read(1024), mime=True)\n            file.seek(0)\n        else:\n            mimetype = magic.from_file(file, mime=True)\n        lg.trace(\"MIME type is {t}\", t=mimetype)\n\n    if \"image/\" in mimetype:\n        lg.debug(\"File detected as image\")\n        return Photo(file=file, filename=file.name if isinstance(file, Path) else None)\n\n    if mimetype == \"video/mp4\":\n        lg.debug(\"File detected as video\")\n        return Video(file=file, filename=file.name if isinstance(file, Path) else None)\n\n    if mimetype in (\"audio/mpeg\", \"audio/mp4\", \"audio/x-m4a\", \"audio/ogg\"):\n        try:\n            res = Voice(file=file, filename=file.name if isinstance(file, Path) else None)\n            lg.debug(\"File detected as voice message\")\n        except ValueError:\n            res = Audio(file=file, filename=file.name if isinstance(file, Path) else None)\n            lg.debug(\"File detected as audio\")\n        return res\n\n    lg.debug(\"File detected as generic document\")\n    return Document(file=file, filename=file.name if isinstance(file, Path) else None)\n</code></pre>"},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.guess_media_type(file)","title":"<code>file</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.guess_media_type(lg)","title":"<code>lg</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.send","title":"send  <code>async</code>","text":"<pre><code>send(\n    obj: Any, update: Update, context: CallbackContext\n) -&gt; Message | list[Message]\n</code></pre> <p>Send a message based on the provided object and annotation.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> <p>The object to send.</p> required <code>Update</code> <p>The Telegram update object containing the chat information.</p> required <code>CallbackContext</code> <p>The callback context containing the bot instance.</p> required <p>Returns:</p> Type Description <code>Message | list[Message]</code> <p>Message | list[Message]: The response from the Telegram API, or a list of responses if multiple objects are sent.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the object type is not supported for sending.</p> Source code in <code>src/kamihi/tg/send.py</code> <pre><code>async def send(obj: Any, update: Update, context: CallbackContext) -&gt; Message | list[Message]:  # noqa: ANN401, C901\n    \"\"\"\n    Send a message based on the provided object and annotation.\n\n    Args:\n        obj (Any): The object to send.\n        update (Update): The Telegram update object containing the chat information.\n        context (CallbackContext): The callback context containing the bot instance.\n\n    Returns:\n        Message | list[Message]: The response from the Telegram API, or a list of responses\n            if multiple objects are sent.\n\n    Raises:\n        TypeError: If the object type is not supported for sending.\n\n    \"\"\"\n    lg = logger.bind(chat_id=update.effective_chat.id)\n\n    if isinstance(obj, str):\n        lg = lg.bind(text=obj)\n        method = context.bot.send_message\n        kwargs = {\"text\": md(obj)}\n        lg.debug(\"Sending as text message\")\n    elif isinstance(obj, (Path, bytes, BufferedReader)):\n        return await send(guess_media_type(obj, lg), update, context)\n    elif isinstance(obj, Media):\n        caption = md(obj.caption) if obj.caption else None\n        lg = lg.bind(path=obj.file, caption=caption)\n\n        kwargs: dict[str, Any] = {\"filename\": obj.filename, \"caption\": caption}\n\n        if isinstance(obj, Document):\n            method = context.bot.send_document\n            kwargs[\"document\"] = obj.file\n            lg.debug(\"Sending as generic file\")\n        elif isinstance(obj, Photo):\n            method = context.bot.send_photo\n            kwargs[\"photo\"] = obj.file\n            lg.debug(\"Sending as photo\")\n        elif isinstance(obj, Video):\n            method = context.bot.send_video\n            kwargs[\"video\"] = obj.file\n            lg.debug(\"Sending as video\")\n        elif isinstance(obj, Audio):\n            method = context.bot.send_audio\n            kwargs[\"audio\"] = obj.file\n            lg.debug(\"Sending as audio\")\n        elif isinstance(obj, Voice):\n            method = context.bot.send_voice\n            kwargs[\"voice\"] = obj.file\n            lg.debug(\"Sending as voice note\")\n        else:\n            mes = f\"Object of type {type(obj)} cannot be sent\"\n            raise TypeError(mes)\n    elif isinstance(obj, Location):\n        lg = lg.bind(latitude=obj.latitude, longitude=obj.longitude, horizontal_accuracy=obj.horizontal_accuracy)\n        method = context.bot.send_location\n        kwargs = {\"latitude\": obj.latitude, \"longitude\": obj.longitude, \"horizontal_accuracy\": obj.horizontal_accuracy}\n        lg.debug(\"Sending as location\")\n    elif (\n        isinstance(obj, collections.abc.Sequence)\n        and 2 &lt;= len(obj) &lt;= 10\n        and any(\n            [\n                all(isinstance(item, (Photo, Video)) for item in obj),\n                all(isinstance(item, Document) for item in obj),\n                all(isinstance(item, Audio) for item in obj),\n            ]\n        )\n    ):\n        lg.debug(\"Sending as media group\")\n        method = context.bot.send_media_group\n        kwargs = {\"media\": [item.as_input_media() for item in obj]}\n    elif (\n        isinstance(obj, collections.abc.Sequence)\n        and 2 &lt;= len(obj) &lt;= 10\n        and all(isinstance(item, Path) for item in obj)\n    ):\n        lg.debug(\"Received list of file paths, guessing media types and trying to send as media group\")\n        return await send(\n            [guess_media_type(item, lg) for item in obj],\n            update,\n            context,\n        )\n    elif isinstance(obj, collections.abc.Sequence):\n        lg.debug(\"Sending as list of items\")\n        return [await send(item, update, context) for item in obj]\n    else:\n        mes = f\"Object of type {type(obj)} cannot be sent\"\n        raise TypeError(mes)\n\n    with lg.catch(exception=TelegramError, message=\"Failed to send\"):\n        res = await method(\n            chat_id=update.effective_chat.id,\n            **kwargs,\n        )\n        lg.bind(\n            response_id=res.message_id if isinstance(res, Message) else [message.message_id for message in res],\n        ).debug(\"Sent\")\n        return res\n</code></pre>"},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.send(obj)","title":"<code>obj</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.send(update)","title":"<code>update</code>","text":""},{"location":"reference/kamihi/tg/send/#kamihi.tg.send.send(context)","title":"<code>context</code>","text":""},{"location":"reference/kamihi/users/","title":"kamihi.users","text":""},{"location":"reference/kamihi/users/#kamihi.users","title":"kamihi.users","text":"<p>Users module of the Kamihi framework.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>models</code> <p>Database models for the users module.</p> <code>users</code> <p>Common user-related functions.</p> <p>Functions:</p> Name Description <code>get_user_from_telegram_id</code> <p>Get a user from the database using their Telegram ID.</p> <code>get_users</code> <p>Get all users from the database.</p> <code>is_user_authorized</code> <p>Check if a user is authorized to use a specific action.</p>"},{"location":"reference/kamihi/users/#kamihi.users.Permission","title":"Permission","text":"<p>               Bases: <code>Document</code></p> <p>Permission model for actions.</p>"},{"location":"reference/kamihi/users/#kamihi.users.RegisteredAction","title":"RegisteredAction","text":"<p>               Bases: <code>Document</code></p> <p>RegisteredAction model.</p> <p>This model represents an action that is registered in the system. It is used to manage user actions and their associated data.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the action.</p> <code>description</code> <code>str</code> <p>A description of the action.</p>"},{"location":"reference/kamihi/users/#kamihi.users.Role","title":"Role","text":"<p>               Bases: <code>Document</code></p> <p>Role model.</p> <p>This model represents a role in the system. It is used to manage user permissions and access levels.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the role.</p>"},{"location":"reference/kamihi/users/#kamihi.users.User","title":"User","text":"<p>               Bases: <code>Document</code></p> <p>Placeholder for the User model.</p> <p>Methods:</p> Name Description <code>get_model</code> <p>Get the model class for the User.</p> <code>set_model</code> <p>Set the model class for the User.</p>"},{"location":"reference/kamihi/users/#kamihi.users.User.get_model","title":"get_model  <code>classmethod</code>","text":"<pre><code>get_model() -&gt; type[User]\n</code></pre> <p>Get the model class for the User.</p> <p>Returns:</p> Name Type Description <code>type</code> <code>type[User]</code> <p>The model class for the User.</p> Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef get_model(cls) -&gt; type[\"User\"]:\n    \"\"\"\n    Get the model class for the User.\n\n    Returns:\n        type: The model class for the User.\n\n    \"\"\"\n    return cls if cls._model is None else cls._model\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.User.set_model","title":"set_model  <code>classmethod</code>","text":"<pre><code>set_model(model: type[User]) -&gt; None\n</code></pre> <p>Set the model class for the User.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <p>The model class to set.</p> required Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef set_model(cls, model: type[\"User\"]) -&gt; None:\n    \"\"\"\n    Set the model class for the User.\n\n    Args:\n        model (type): The model class to set.\n\n    \"\"\"\n    cls._model = model\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.User.set_model(model)","title":"<code>model</code>","text":""},{"location":"reference/kamihi/users/#kamihi.users.get_user_from_telegram_id","title":"get_user_from_telegram_id","text":"<pre><code>get_user_from_telegram_id(telegram_id: int) -&gt; User | None\n</code></pre> <p>Get a user from the database using their Telegram ID.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>The Telegram ID of the user.</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User | None: The user object if found, otherwise None.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def get_user_from_telegram_id(telegram_id: int) -&gt; User | None:\n    \"\"\"\n    Get a user from the database using their Telegram ID.\n\n    Args:\n        telegram_id (int): The Telegram ID of the user.\n\n    Returns:\n        User | None: The user object if found, otherwise None.\n\n    \"\"\"\n    return User.objects(telegram_id=telegram_id).first()\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.get_user_from_telegram_id(telegram_id)","title":"<code>telegram_id</code>","text":""},{"location":"reference/kamihi/users/#kamihi.users.get_users","title":"get_users","text":"<pre><code>get_users() -&gt; list[User]\n</code></pre> <p>Get all users from the database.</p> <p>Returns:</p> Type Description <code>list[User]</code> <p>list[User]: A list of all users in the database.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def get_users() -&gt; list[User]:\n    \"\"\"\n    Get all users from the database.\n\n    Returns:\n        list[User]: A list of all users in the database.\n\n    \"\"\"\n    return list(User.objects)\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.is_user_authorized","title":"is_user_authorized","text":"<pre><code>is_user_authorized(user: User, action: str) -&gt; bool\n</code></pre> <p>Check if a user is authorized to use a specific action.</p> <p>Parameters:</p> Name Type Description Default <code>User</code> <p>The user object to check.</p> required <code>str</code> <p>The action to check authorization for.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the user is authorized, False otherwise.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def is_user_authorized(user: User, action: str) -&gt; bool:\n    \"\"\"\n    Check if a user is authorized to use a specific action.\n\n    Args:\n        user (User): The user object to check.\n        action (str): The action to check authorization for.\n\n    Returns:\n        bool: True if the user is authorized, False otherwise.\n\n    \"\"\"\n    if user.is_admin:\n        return True\n\n    action = RegisteredAction.objects(name=action).first()\n    role = Role.objects(users=user).first()\n    permissions = Permission.objects(Q(action=action) &amp; (Q(users=user) | Q(roles=role))).first()\n\n    return bool(permissions)\n</code></pre>"},{"location":"reference/kamihi/users/#kamihi.users.is_user_authorized(user)","title":"<code>user</code>","text":""},{"location":"reference/kamihi/users/#kamihi.users.is_user_authorized(action)","title":"<code>action</code>","text":""},{"location":"reference/kamihi/users/models/","title":"kamihi.users.models","text":""},{"location":"reference/kamihi/users/models/#kamihi.users.models","title":"kamihi.users.models","text":"<p>Database models for the users module.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>permission</code> <p>Permission model for actions.</p> <code>role</code> <p>Role model (the one I never had...).</p> <code>user</code> <p>User model.</p> <p>Classes:</p> Name Description <code>Permission</code> <p>Permission model for actions.</p> <code>Role</code> <p>Role model.</p> <code>User</code> <p>Placeholder for the User model.</p>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.Permission","title":"Permission","text":"<p>               Bases: <code>Document</code></p> <p>Permission model for actions.</p>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.Role","title":"Role","text":"<p>               Bases: <code>Document</code></p> <p>Role model.</p> <p>This model represents a role in the system. It is used to manage user permissions and access levels.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the role.</p>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.User","title":"User","text":"<p>               Bases: <code>Document</code></p> <p>Placeholder for the User model.</p> <p>Methods:</p> Name Description <code>get_model</code> <p>Get the model class for the User.</p> <code>set_model</code> <p>Set the model class for the User.</p>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.User.get_model","title":"get_model  <code>classmethod</code>","text":"<pre><code>get_model() -&gt; type[User]\n</code></pre> <p>Get the model class for the User.</p> <p>Returns:</p> Name Type Description <code>type</code> <code>type[User]</code> <p>The model class for the User.</p> Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef get_model(cls) -&gt; type[\"User\"]:\n    \"\"\"\n    Get the model class for the User.\n\n    Returns:\n        type: The model class for the User.\n\n    \"\"\"\n    return cls if cls._model is None else cls._model\n</code></pre>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.User.set_model","title":"set_model  <code>classmethod</code>","text":"<pre><code>set_model(model: type[User]) -&gt; None\n</code></pre> <p>Set the model class for the User.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <p>The model class to set.</p> required Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef set_model(cls, model: type[\"User\"]) -&gt; None:\n    \"\"\"\n    Set the model class for the User.\n\n    Args:\n        model (type): The model class to set.\n\n    \"\"\"\n    cls._model = model\n</code></pre>"},{"location":"reference/kamihi/users/models/#kamihi.users.models.User.set_model(model)","title":"<code>model</code>","text":""},{"location":"reference/kamihi/users/models/permission/","title":"kamihi.users.models.permission","text":""},{"location":"reference/kamihi/users/models/permission/#kamihi.users.models.permission","title":"kamihi.users.models.permission","text":"<p>Permission model for actions.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>Permission</code> <p>Permission model for actions.</p>"},{"location":"reference/kamihi/users/models/permission/#kamihi.users.models.permission.Permission","title":"Permission","text":"<p>               Bases: <code>Document</code></p> <p>Permission model for actions.</p>"},{"location":"reference/kamihi/users/models/role/","title":"kamihi.users.models.role","text":""},{"location":"reference/kamihi/users/models/role/#kamihi.users.models.role","title":"kamihi.users.models.role","text":"<p>Role model (the one I never had...).</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>Role</code> <p>Role model.</p>"},{"location":"reference/kamihi/users/models/role/#kamihi.users.models.role.Role","title":"Role","text":"<p>               Bases: <code>Document</code></p> <p>Role model.</p> <p>This model represents a role in the system. It is used to manage user permissions and access levels.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the role.</p>"},{"location":"reference/kamihi/users/models/user/","title":"kamihi.users.models.user","text":""},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user","title":"kamihi.users.models.user","text":"<p>User model.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>User</code> <p>Placeholder for the User model.</p>"},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user.User","title":"User","text":"<p>               Bases: <code>Document</code></p> <p>Placeholder for the User model.</p> <p>Methods:</p> Name Description <code>get_model</code> <p>Get the model class for the User.</p> <code>set_model</code> <p>Set the model class for the User.</p>"},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user.User.get_model","title":"get_model  <code>classmethod</code>","text":"<pre><code>get_model() -&gt; type[User]\n</code></pre> <p>Get the model class for the User.</p> <p>Returns:</p> Name Type Description <code>type</code> <code>type[User]</code> <p>The model class for the User.</p> Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef get_model(cls) -&gt; type[\"User\"]:\n    \"\"\"\n    Get the model class for the User.\n\n    Returns:\n        type: The model class for the User.\n\n    \"\"\"\n    return cls if cls._model is None else cls._model\n</code></pre>"},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user.User.set_model","title":"set_model  <code>classmethod</code>","text":"<pre><code>set_model(model: type[User]) -&gt; None\n</code></pre> <p>Set the model class for the User.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <p>The model class to set.</p> required Source code in <code>src/kamihi/users/models/user.py</code> <pre><code>@classmethod\ndef set_model(cls, model: type[\"User\"]) -&gt; None:\n    \"\"\"\n    Set the model class for the User.\n\n    Args:\n        model (type): The model class to set.\n\n    \"\"\"\n    cls._model = model\n</code></pre>"},{"location":"reference/kamihi/users/models/user/#kamihi.users.models.user.User.set_model(model)","title":"<code>model</code>","text":""},{"location":"reference/kamihi/users/users/","title":"kamihi.users.users","text":""},{"location":"reference/kamihi/users/users/#kamihi.users.users","title":"kamihi.users.users","text":"<p>Common user-related functions.</p> License <p>MIT</p> <p>Functions:</p> Name Description <code>get_user_from_telegram_id</code> <p>Get a user from the database using their Telegram ID.</p> <code>get_users</code> <p>Get all users from the database.</p> <code>is_user_authorized</code> <p>Check if a user is authorized to use a specific action.</p>"},{"location":"reference/kamihi/users/users/#kamihi.users.users.get_user_from_telegram_id","title":"get_user_from_telegram_id","text":"<pre><code>get_user_from_telegram_id(telegram_id: int) -&gt; User | None\n</code></pre> <p>Get a user from the database using their Telegram ID.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>The Telegram ID of the user.</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User | None: The user object if found, otherwise None.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def get_user_from_telegram_id(telegram_id: int) -&gt; User | None:\n    \"\"\"\n    Get a user from the database using their Telegram ID.\n\n    Args:\n        telegram_id (int): The Telegram ID of the user.\n\n    Returns:\n        User | None: The user object if found, otherwise None.\n\n    \"\"\"\n    return User.objects(telegram_id=telegram_id).first()\n</code></pre>"},{"location":"reference/kamihi/users/users/#kamihi.users.users.get_user_from_telegram_id(telegram_id)","title":"<code>telegram_id</code>","text":""},{"location":"reference/kamihi/users/users/#kamihi.users.users.get_users","title":"get_users","text":"<pre><code>get_users() -&gt; list[User]\n</code></pre> <p>Get all users from the database.</p> <p>Returns:</p> Type Description <code>list[User]</code> <p>list[User]: A list of all users in the database.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def get_users() -&gt; list[User]:\n    \"\"\"\n    Get all users from the database.\n\n    Returns:\n        list[User]: A list of all users in the database.\n\n    \"\"\"\n    return list(User.objects)\n</code></pre>"},{"location":"reference/kamihi/users/users/#kamihi.users.users.is_user_authorized","title":"is_user_authorized","text":"<pre><code>is_user_authorized(user: User, action: str) -&gt; bool\n</code></pre> <p>Check if a user is authorized to use a specific action.</p> <p>Parameters:</p> Name Type Description Default <code>User</code> <p>The user object to check.</p> required <code>str</code> <p>The action to check authorization for.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the user is authorized, False otherwise.</p> Source code in <code>src/kamihi/users/users.py</code> <pre><code>def is_user_authorized(user: User, action: str) -&gt; bool:\n    \"\"\"\n    Check if a user is authorized to use a specific action.\n\n    Args:\n        user (User): The user object to check.\n        action (str): The action to check authorization for.\n\n    Returns:\n        bool: True if the user is authorized, False otherwise.\n\n    \"\"\"\n    if user.is_admin:\n        return True\n\n    action = RegisteredAction.objects(name=action).first()\n    role = Role.objects(users=user).first()\n    permissions = Permission.objects(Q(action=action) &amp; (Q(users=user) | Q(roles=role))).first()\n\n    return bool(permissions)\n</code></pre>"},{"location":"reference/kamihi/users/users/#kamihi.users.users.is_user_authorized(user)","title":"<code>user</code>","text":""},{"location":"reference/kamihi/users/users/#kamihi.users.users.is_user_authorized(action)","title":"<code>action</code>","text":""},{"location":"reference/kamihi/web/","title":"kamihi.web","text":""},{"location":"reference/kamihi/web/#kamihi.web","title":"kamihi.web","text":"<p>Web interface module for Kamihi.</p> License <p>MIT</p> <p>Modules:</p> Name Description <code>views</code> <p>Custom views for the admin interface.</p> <code>web</code> <p>Web interface main file.</p> <p>Classes:</p> Name Description <code>KamihiWeb</code> <p>KamihiWeb is a class that sets up a web server for the Kamihi application.</p>"},{"location":"reference/kamihi/web/#kamihi.web.KamihiWeb","title":"KamihiWeb","text":"<pre><code>KamihiWeb(\n    settings: WebSettings,\n    db_settings: DatabaseSettings,\n    hooks: dict[\n        Literal[\n            \"before_create\",\n            \"after_create\",\n            \"before_edit\",\n            \"after_edit\",\n            \"before_delete\",\n            \"after_delete\",\n        ],\n        list[callable],\n    ] = None,\n)\n</code></pre> <p>               Bases: <code>Thread</code></p> <p>KamihiWeb is a class that sets up a web server for the Kamihi application.</p> <p>This class is responsible for creating and running a web server with an admin interface. It also handles the database connection and configuration.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>WebSettings</code> <p>The settings for the Kamihi bot.</p> <code>db_settings</code> <code>DatabaseSettings</code> <p>The database settings for the Kamihi bot.</p> <code>app</code> <code>Starlette</code> <p>The application instance.</p> <code>admin</code> <code>Admin</code> <p>The Starlette-Admin instance for the admin interface.</p> <p>Initialize the KamihiWeb instance.</p> <p>Methods:</p> Name Description <code>run</code> <p>Run the app.</p> Source code in <code>src/kamihi/web/web.py</code> <pre><code>def __init__(\n    self,\n    settings: WebSettings,\n    db_settings: DatabaseSettings,\n    hooks: dict[\n        Literal[\n            \"before_create\",\n            \"after_create\",\n            \"before_edit\",\n            \"after_edit\",\n            \"before_delete\",\n            \"after_delete\",\n        ],\n        list[callable],\n    ] = None,\n) -&gt; None:\n    \"\"\"Initialize the KamihiWeb instance.\"\"\"\n    super().__init__()\n    self.settings = settings\n    self.db_settings = db_settings\n    self.hooks = hooks\n\n    self.daemon = True\n\n    self.app = None\n    self.admin = None\n</code></pre>"},{"location":"reference/kamihi/web/#kamihi.web.KamihiWeb.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the app.</p> Source code in <code>src/kamihi/web/web.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the app.\"\"\"\n    self._create_app()\n\n    uvicorn.run(\n        self.app,\n        host=self.settings.host,\n        port=self.settings.port,\n        log_config={\n            \"version\": 1,\n            \"disable_existing_loggers\": False,\n            \"formatters\": {\n                \"default\": {\n                    \"()\": \"uvicorn.logging.DefaultFormatter\",\n                    \"fmt\": \"%(message)s\",\n                },\n                \"access\": {\n                    \"()\": \"uvicorn.logging.AccessFormatter\",\n                    \"fmt\": '%(client_addr)s - \"%(request_line)s\" %(status_code)s',  # noqa: E501\n                },\n            },\n            \"handlers\": {\n                \"default\": {\n                    \"formatter\": \"default\",\n                    \"class\": \"kamihi.web.web._InterceptHandler\",\n                },\n                \"access\": {\n                    \"formatter\": \"access\",\n                    \"class\": \"kamihi.web.web._InterceptHandler\",\n                },\n            },\n            \"loggers\": {\n                \"uvicorn\": {\"handlers\": [\"default\"], \"level\": \"DEBUG\", \"propagate\": False},\n                \"uvicorn.error\": {\"level\": \"DEBUG\"},\n                \"uvicorn.access\": {\"handlers\": [\"access\"], \"level\": \"DEBUG\", \"propagate\": False},\n            },\n        },\n    )\n</code></pre>"},{"location":"reference/kamihi/web/views/","title":"kamihi.web.views","text":""},{"location":"reference/kamihi/web/views/#kamihi.web.views","title":"kamihi.web.views","text":"<p>Custom views for the admin interface.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>HooksView</code> <p>HooksView is a custom view that accepts a dictionary of hooks on different events.</p> <code>NoClsView</code> <p>NoClsView hides the \"_cls\" field from the admin interface.</p> <code>ReadOnlyView</code> <p>ReadOnlyView makes the model read-only in the admin interface.</p>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView","title":"HooksView","text":"<pre><code>HooksView(*args, hooks: dict = None, **kwargs)\n</code></pre> <p>               Bases: <code>NoClsView</code></p> <p>HooksView is a custom view that accepts a dictionary of hooks on different events.</p> <p>Initialize the HooksView with hooks.</p> <p>Parameters:</p> Name Type Description Default <p>Positional arguments.</p> <code>()</code> <code>dict</code> <p>A dictionary of hooks for different events.</p> <code>None</code> <p>Keyword arguments.</p> <code>{}</code> <p>Methods:</p> Name Description <code>after_create</code> <p>Run after creating an object.</p> <code>after_delete</code> <p>Run after deleting an object.</p> <code>after_edit</code> <p>Run after editing an object.</p> <code>before_create</code> <p>Run before creating an object.</p> <code>before_delete</code> <p>Run before deleting an object.</p> <code>before_edit</code> <p>Run before editing an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def __init__(self, *args, hooks: dict = None, **kwargs) -&gt; None:  # noqa: ANN002, ANN003\n    \"\"\"\n    Initialize the HooksView with hooks.\n\n    Args:\n        *args: Positional arguments.\n        hooks (dict): A dictionary of hooks for different events.\n        **kwargs: Keyword arguments.\n\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self.hooks = hooks or {}\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView(*args)","title":"<code>*args</code>","text":""},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView(hooks)","title":"<code>hooks</code>","text":""},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.after_create","title":"after_create  <code>async</code>","text":"<pre><code>after_create(request: Request, obj: Any) -&gt; None\n</code></pre> <p>Run after creating an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def after_create(self, request: Request, obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run after creating an object.\"\"\"\n    for hook in self.hooks.get(\"after_create\", []):\n        await hook(request, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.after_delete","title":"after_delete  <code>async</code>","text":"<pre><code>after_delete(request: Request, obj: Any) -&gt; None\n</code></pre> <p>Run after deleting an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def after_delete(self, request: Request, obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run after deleting an object.\"\"\"\n    for hook in self.hooks.get(\"after_delete\", []):\n        await hook(request, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.after_edit","title":"after_edit  <code>async</code>","text":"<pre><code>after_edit(request: Request, obj: Any) -&gt; None\n</code></pre> <p>Run after editing an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def after_edit(self, request: Request, obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run after editing an object.\"\"\"\n    for hook in self.hooks.get(\"after_edit\", []):\n        await hook(request, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.before_create","title":"before_create  <code>async</code>","text":"<pre><code>before_create(\n    request: Request, data: dict[str, Any], obj: Any\n) -&gt; None\n</code></pre> <p>Run before creating an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def before_create(self, request: Request, data: dict[str, Any], obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run before creating an object.\"\"\"\n    for hook in self.hooks.get(\"before_create\", []):\n        await hook(request, data, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.before_delete","title":"before_delete  <code>async</code>","text":"<pre><code>before_delete(request: Request, obj: Any) -&gt; None\n</code></pre> <p>Run before deleting an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def before_delete(self, request: Request, obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run before deleting an object.\"\"\"\n    for hook in self.hooks.get(\"before_delete\", []):\n        await hook(request, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.HooksView.before_edit","title":"before_edit  <code>async</code>","text":"<pre><code>before_edit(\n    request: Request, data: dict[str, Any], obj: Any\n) -&gt; None\n</code></pre> <p>Run before editing an object.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>async def before_edit(self, request: Request, data: dict[str, Any], obj: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Run before editing an object.\"\"\"\n    for hook in self.hooks.get(\"before_edit\", []):\n        await hook(request, data, obj)\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.NoClsView","title":"NoClsView","text":"<p>               Bases: <code>ModelView</code></p> <p>NoClsView hides the \"_cls\" field from the admin interface.</p>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.ReadOnlyView","title":"ReadOnlyView","text":"<pre><code>ReadOnlyView(*args, hooks: dict = None, **kwargs)\n</code></pre> <p>               Bases: <code>HooksView</code></p> <p>ReadOnlyView makes the model read-only in the admin interface.</p> <p>Methods:</p> Name Description <code>can_create</code> <p>Check if the user can create a new instance of the model.</p> <code>can_delete</code> <p>Check if the user can edit an instance of the model.</p> <code>can_edit</code> <p>Check if the user can edit an instance of the model.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def __init__(self, *args, hooks: dict = None, **kwargs) -&gt; None:  # noqa: ANN002, ANN003\n    \"\"\"\n    Initialize the HooksView with hooks.\n\n    Args:\n        *args: Positional arguments.\n        hooks (dict): A dictionary of hooks for different events.\n        **kwargs: Keyword arguments.\n\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self.hooks = hooks or {}\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.ReadOnlyView.can_create","title":"can_create","text":"<pre><code>can_create(request: Request) -&gt; bool\n</code></pre> <p>Check if the user can create a new instance of the model.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def can_create(self, request: Request) -&gt; bool:  # noqa: ARG002\n    \"\"\"Check if the user can create a new instance of the model.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.ReadOnlyView.can_delete","title":"can_delete","text":"<pre><code>can_delete(request: Request) -&gt; bool\n</code></pre> <p>Check if the user can edit an instance of the model.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def can_delete(self, request: Request) -&gt; bool:  # noqa: ARG002\n    \"\"\"Check if the user can edit an instance of the model.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/kamihi/web/views/#kamihi.web.views.ReadOnlyView.can_edit","title":"can_edit","text":"<pre><code>can_edit(request: Request) -&gt; bool\n</code></pre> <p>Check if the user can edit an instance of the model.</p> Source code in <code>src/kamihi/web/views.py</code> <pre><code>def can_edit(self, request: Request) -&gt; bool:  # noqa: ARG002\n    \"\"\"Check if the user can edit an instance of the model.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/kamihi/web/web/","title":"kamihi.web.web","text":""},{"location":"reference/kamihi/web/web/#kamihi.web.web","title":"kamihi.web.web","text":"<p>Web interface main file.</p> License <p>MIT</p> <p>Classes:</p> Name Description <code>KamihiWeb</code> <p>KamihiWeb is a class that sets up a web server for the Kamihi application.</p>"},{"location":"reference/kamihi/web/web/#kamihi.web.web.KamihiWeb","title":"KamihiWeb","text":"<pre><code>KamihiWeb(\n    settings: WebSettings,\n    db_settings: DatabaseSettings,\n    hooks: dict[\n        Literal[\n            \"before_create\",\n            \"after_create\",\n            \"before_edit\",\n            \"after_edit\",\n            \"before_delete\",\n            \"after_delete\",\n        ],\n        list[callable],\n    ] = None,\n)\n</code></pre> <p>               Bases: <code>Thread</code></p> <p>KamihiWeb is a class that sets up a web server for the Kamihi application.</p> <p>This class is responsible for creating and running a web server with an admin interface. It also handles the database connection and configuration.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>WebSettings</code> <p>The settings for the Kamihi bot.</p> <code>db_settings</code> <code>DatabaseSettings</code> <p>The database settings for the Kamihi bot.</p> <code>app</code> <code>Starlette</code> <p>The application instance.</p> <code>admin</code> <code>Admin</code> <p>The Starlette-Admin instance for the admin interface.</p> <p>Initialize the KamihiWeb instance.</p> <p>Methods:</p> Name Description <code>run</code> <p>Run the app.</p> Source code in <code>src/kamihi/web/web.py</code> <pre><code>def __init__(\n    self,\n    settings: WebSettings,\n    db_settings: DatabaseSettings,\n    hooks: dict[\n        Literal[\n            \"before_create\",\n            \"after_create\",\n            \"before_edit\",\n            \"after_edit\",\n            \"before_delete\",\n            \"after_delete\",\n        ],\n        list[callable],\n    ] = None,\n) -&gt; None:\n    \"\"\"Initialize the KamihiWeb instance.\"\"\"\n    super().__init__()\n    self.settings = settings\n    self.db_settings = db_settings\n    self.hooks = hooks\n\n    self.daemon = True\n\n    self.app = None\n    self.admin = None\n</code></pre>"},{"location":"reference/kamihi/web/web/#kamihi.web.web.KamihiWeb.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the app.</p> Source code in <code>src/kamihi/web/web.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the app.\"\"\"\n    self._create_app()\n\n    uvicorn.run(\n        self.app,\n        host=self.settings.host,\n        port=self.settings.port,\n        log_config={\n            \"version\": 1,\n            \"disable_existing_loggers\": False,\n            \"formatters\": {\n                \"default\": {\n                    \"()\": \"uvicorn.logging.DefaultFormatter\",\n                    \"fmt\": \"%(message)s\",\n                },\n                \"access\": {\n                    \"()\": \"uvicorn.logging.AccessFormatter\",\n                    \"fmt\": '%(client_addr)s - \"%(request_line)s\" %(status_code)s',  # noqa: E501\n                },\n            },\n            \"handlers\": {\n                \"default\": {\n                    \"formatter\": \"default\",\n                    \"class\": \"kamihi.web.web._InterceptHandler\",\n                },\n                \"access\": {\n                    \"formatter\": \"access\",\n                    \"class\": \"kamihi.web.web._InterceptHandler\",\n                },\n            },\n            \"loggers\": {\n                \"uvicorn\": {\"handlers\": [\"default\"], \"level\": \"DEBUG\", \"propagate\": False},\n                \"uvicorn.error\": {\"level\": \"DEBUG\"},\n                \"uvicorn.access\": {\"handlers\": [\"access\"], \"level\": \"DEBUG\", \"propagate\": False},\n            },\n        },\n    )\n</code></pre>"}]}